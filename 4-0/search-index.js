var searchIndex = JSON.parse('{\
"inkwell":{"doc":"Inkwell documentation is a work in progress.","t":"NNNDNNEEENNNNNENENNNENNNNNNNNNNNNNNNNNENNNNNNNNNNNENNNNNNNNNNNNNNNNAALLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLAALLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAAALLLLLLAAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAADENNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIDDLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLDENNNDNNEILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLNNNNNNNDNDNNNNENNDNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLQDDIDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLDLLLLLLFLLALLLLFFLFLLLLLFFNNEENNNEDNNNNNNNENNDDDDLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNIEDNNNIEIENNIDNNNDNNIDNNNQQDNNIDNNNQQEDNNNQQQDNNNDNLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNIENNIEDNNNNINNQQQEIEDNNNDDNNNNNNNNNNRNNNNNNNNIDNNNDNDNDNNNNEDNINDNNNNNNNDNNNNNDNIDNNNNNNNNNNNNNNDNNNNNNNNNNNNNNDNNNNNLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Acquire","AcquireRelease","Add","AddressSpace","Aggressive","And","AtomicOrdering","AtomicRMWBinOp","DLLStorageClass","Default","Default","Default","EQ","Export","FloatPredicate","GeneralDynamicTLSModel","GlobalVisibility","Hidden","Import","InitialExecTLSModel","IntPredicate","Less","LocalDynamicTLSModel","LocalExecTLSModel","Max","Min","Monotonic","NE","Nand","None","NotAtomic","OEQ","OGE","OGT","OLE","OLT","ONE","ORD","OptimizationLevel","Or","PredicateFalse","PredicateTrue","Protected","Release","SGE","SGT","SLE","SLT","SequentiallyConsistent","Sub","ThreadLocalMode","UEQ","UGE","UGE","UGT","UGT","ULE","ULE","ULT","ULT","UMax","UMin","UNE","UNO","Unordered","Xchg","Xor","attributes","basic_block","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builder","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","context","data_layout","default","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","execution_engine","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","intrinsics","memory_buffer","module","object_file","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","passes","support","targets","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","types","values","Attribute","AttributeLoc","Function","Param","Return","as_mut_ptr","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","equivalent","equivalent","fmt","fmt","from","from","get_enum_kind_id","get_enum_value","get_last_enum_kind_id","get_named_enum_kind_id","get_string_kind_id","get_string_value","hash","into","into","is_enum","is_string","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","BasicBlock","as_mut_ptr","borrow","borrow_mut","clone","clone_into","delete","eq","equivalent","fmt","from","get_address","get_context","get_first_instruction","get_first_use","get_instruction_with_name","get_last_instruction","get_name","get_next_basic_block","get_parent","get_previous_basic_block","get_terminator","hash","into","move_after","move_before","remove_from_function","replace_all_uses_with","set_name","to_owned","try_from","try_into","type_id","Builder","as_mut_ptr","borrow","borrow_mut","build_address_space_cast","build_aggregate_return","build_alloca","build_and","build_array_alloca","build_array_malloc","build_atomicrmw","build_bitcast","build_call","build_cast","build_cmpxchg","build_conditional_branch","build_extract_element","build_extract_value","build_fence","build_float_add","build_float_cast","build_float_compare","build_float_div","build_float_ext","build_float_mul","build_float_neg","build_float_rem","build_float_sub","build_float_to_signed_int","build_float_to_unsigned_int","build_float_trunc","build_free","build_gep","build_global_string","build_global_string_ptr","build_in_bounds_gep","build_indirect_branch","build_insert_element","build_insert_value","build_int_add","build_int_cast","build_int_compare","build_int_exact_signed_div","build_int_mul","build_int_neg","build_int_nsw_add","build_int_nsw_mul","build_int_nsw_neg","build_int_nsw_sub","build_int_nuw_add","build_int_nuw_mul","build_int_nuw_neg","build_int_nuw_sub","build_int_s_extend","build_int_s_extend_or_bit_cast","build_int_signed_div","build_int_signed_rem","build_int_sub","build_int_to_ptr","build_int_truncate","build_int_truncate_or_bit_cast","build_int_unsigned_div","build_int_unsigned_rem","build_int_z_extend","build_int_z_extend_or_bit_cast","build_invoke","build_is_not_null","build_is_null","build_landing_pad","build_left_shift","build_load","build_malloc","build_not","build_or","build_phi","build_pointer_cast","build_ptr_diff","build_ptr_to_int","build_resume","build_return","build_right_shift","build_select","build_shuffle_vector","build_signed_int_to_float","build_store","build_struct_gep","build_switch","build_unconditional_branch","build_unreachable","build_unsigned_int_to_float","build_va_arg","build_xor","clear_insertion_position","drop","fmt","from","get_insert_block","insert_instruction","into","new","position_at","position_at_end","position_before","try_from","try_into","type_id","AsContextRef","Context","ContextRef","append_basic_block","append_basic_block","as_ctx_ref","as_ctx_ref","as_ctx_ref","bool_type","bool_type","borrow","borrow","borrow_mut","borrow_mut","const_string","const_string","const_struct","const_struct","create","create_builder","create_builder","create_enum_attribute","create_enum_attribute","create_inline_asm","create_inline_asm","create_module","create_module","create_module_from_ir","create_module_from_ir","create_string_attribute","create_string_attribute","custom_width_int_type","custom_width_int_type","drop","eq","eq","eq","eq","equivalent","equivalent","f128_type","f128_type","f16_type","f16_type","f32_type","f32_type","f64_type","f64_type","fmt","fmt","from","from","get_global","get_kind_id","get_kind_id","i128_type","i128_type","i16_type","i16_type","i32_type","i32_type","i64_type","i64_type","i8_type","i8_type","insert_basic_block_after","insert_basic_block_after","into","into","metadata_node","metadata_node","metadata_string","metadata_string","opaque_struct_type","opaque_struct_type","ppc_f128_type","ppc_f128_type","prepend_basic_block","prepend_basic_block","ptr_sized_int_type","ptr_sized_int_type","struct_type","struct_type","try_from","try_from","try_into","try_into","type_id","type_id","void_type","void_type","x86_f80_type","x86_f80_type","DataLayout","as_ptr","as_str","borrow","borrow_mut","eq","equivalent","fmt","from","into","try_from","try_into","type_id","ExecutionEngine","FunctionLookupError","FunctionNotFound","IncorrectModuleOwner","JITNotEnabled","JitFunction","LLVMError","ModuleNotOwned","RemoveModuleError","UnsafeFunctionPointer","add_global_mapping","add_module","as_mut_ptr","as_raw","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call","call","call","call","call","call","call","call","call","call","call","call","call","cause","clone","clone","clone_into","clone_into","description","drop","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","free_fn_machine_code","from","from","from","from","get_function","get_function_address","get_function_value","get_target_data","into","into","into","into","into_raw","link_in_interpreter","link_in_mc_jit","new","provide","provide","remove_module","run_function","run_function_as_main","run_static_constructors","run_static_destructors","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Intrinsic","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","from","into","to_owned","try_from","try_into","type_id","MemoryBuffer","as_mut_ptr","as_slice","borrow","borrow_mut","create_from_file","create_from_memory_range","create_from_memory_range_copy","create_from_stdin","create_object_file","drop","fmt","from","get_size","into","new","try_from","try_into","type_id","Appending","AvailableExternally","Common","DLLExport","DLLImport","External","ExternalWeak","FunctionIterator","Ghost","GlobalIterator","Internal","LinkOnceAny","LinkOnceODR","LinkOnceODRAutoHide","Linkage","LinkerPrivate","LinkerPrivateWeak","Module","Private","WeakAny","WeakODR","add_function","add_global","add_global_metadata","as_mut_ptr","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","create","create_execution_engine","create_interpreter_execution_engine","create_jit_execution_engine","drop","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","get_context","get_data_layout","get_first_function","get_first_global","get_function","get_functions","get_global","get_global_metadata","get_global_metadata_size","get_globals","get_last_function","get_last_global","get_name","get_struct_type","get_triple","hash","into","into","into","into","into","into_iter","into_iter","link_in_module","next","next","parse_bitcode_from_buffer","parse_bitcode_from_path","partial_cmp","print_to_file","print_to_stderr","print_to_string","run_in_pass_manager","set_data_layout","set_inline_assembly","set_name","set_triple","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","verify","write_bitcode_to_file","write_bitcode_to_memory","write_bitcode_to_path","ObjectFile","Relocation","RelocationIterator","Section","SectionIterator","Symbol","SymbolIterator","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_mut_ptr","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_address","get_address","get_contents","get_name","get_name","get_offset","get_relocations","get_sections","get_symbols","get_symbols","get_type","get_value","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","new","new","new","new","new","new","new","next","next","next","size","size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Input","PassManager","PassManagerBuilder","PassManagerSubType","PassRegistry","add_aggressive_dce_pass","add_alignment_from_assumptions_pass","add_always_inliner_pass","add_argument_promotion_pass","add_basic_alias_analysis_pass","add_bb_vectorize_pass","add_bit_tracking_dce_pass","add_cfg_simplification_pass","add_constant_merge_pass","add_constant_propagation_pass","add_correlated_value_propagation_pass","add_dead_arg_elimination_pass","add_dead_store_elimination_pass","add_demote_memory_to_register_pass","add_early_cse_mem_ssa_pass","add_early_cse_pass","add_function_attrs_pass","add_function_inlining_pass","add_global_dce_pass","add_global_optimizer_pass","add_gvn_pass","add_ind_var_simplify_pass","add_instruction_combining_pass","add_internalize_pass","add_ip_constant_propagation_pass","add_ipsccp_pass","add_jump_threading_pass","add_licm_pass","add_loop_deletion_pass","add_loop_idiom_pass","add_loop_reroll_pass","add_loop_rotate_pass","add_loop_unroll_pass","add_loop_unswitch_pass","add_loop_vectorize_pass","add_lower_expect_intrinsic_pass","add_lower_switch_pass","add_memcpy_optimize_pass","add_merged_load_store_motion_pass","add_new_gvn_pass","add_partially_inline_lib_calls_pass","add_promote_memory_to_register_pass","add_prune_eh_pass","add_reassociate_pass","add_scalar_repl_aggregates_pass","add_scalar_repl_aggregates_pass_ssa","add_scalar_repl_aggregates_pass_with_threshold","add_scalarizer_pass","add_sccp_pass","add_scoped_no_alias_aa_pass","add_simplify_lib_calls_pass","add_slp_vectorize_pass","add_strip_dead_prototypes_pass","add_strip_symbol_pass","add_tail_call_elimination_pass","add_type_based_alias_analysis_pass","add_verifier_pass","as_mut_ptr","as_mut_ptr","as_mut_ptr","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","create","create","create","drop","drop","finalize","fmt","fmt","fmt","from","from","from","get_global","initialize","initialize_analysis","initialize_codegen","initialize_core","initialize_inst_combine","initialize_instrumentation","initialize_ipa","initialize_ipo","initialize_obj_carc_opts","initialize_scalar_opts","initialize_target","initialize_transform_utils","initialize_vectorization","into","into","into","new","new","new","populate_function_pass_manager","populate_lto_pass_manager","populate_module_pass_manager","run_in_pass_manager","run_on","set_disable_simplify_lib_calls","set_disable_unit_at_a_time","set_disable_unroll_loops","set_inliner_with_threshold","set_optimization_level","set_size_level","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","LLVMString","borrow","borrow_mut","cause","deref","description","drop","enable_llvm_pretty_stack_trace","eq","equivalent","error_handling","fmt","fmt","from","into","is_multithreaded","load_library_permanently","provide","shutdown_llvm","to_string","to_string","try_from","try_into","type_id","install_fatal_error_handler","reset_fatal_error_handler","Assembly","BigEndian","ByteOrdering","CodeModel","Default","Default","DynamicNoPic","FileType","InitializationConfig","JITDefault","Kernel","Large","LittleEndian","Medium","Object","PIC","RelocMode","Small","Static","Target","TargetData","TargetMachine","TargetTriple","add_analysis_passes","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_ptr","as_str","asm_parser","asm_printer","base","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","create","create","create_target_machine","default","disassembler","drop","drop","element_at_offset","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_name","from_triple","get_abi_alignment","get_abi_size","get_bit_size","get_byte_ordering","get_call_frame_alignment","get_cpu","get_data_layout","get_default_triple","get_description","get_feature_string","get_first","get_name","get_next","get_pointer_byte_size","get_preferred_alignment","get_preferred_alignment_of_global","get_store_size","get_target","get_target_data","get_triple","has_asm_backend","has_jit","has_target_machine","info","initialize_aarch64","initialize_all","initialize_amd_gpu","initialize_arm","initialize_bpf","initialize_hexagon","initialize_lanai","initialize_mips","initialize_msp430","initialize_native","initialize_nvptx","initialize_power_pc","initialize_sparc","initialize_system_z","initialize_x86","initialize_x_core","into","into","into","into","into","into","into","into","into","machine_code","new","new","new","new","offset_of_element","ptr_sized_int_type_in_context","set_asm_verbosity","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write_to_file","write_to_memory_buffer","Alphanumeric","AnyType","AnyTypeEnum","ArrayType","ArrayType","ArrayType","ArrayType","AsTypeRef","BasicMetadataTypeEnum","BasicType","BasicTypeEnum","Binary","Decimal","FloatMathType","FloatType","FloatType","FloatType","FloatType","FunctionType","FunctionType","Hexadecimal","IntMathType","IntType","IntType","IntType","IntType","MathConvType","MathConvType","MetadataType","MetadataType","Octal","PointerMathType","PointerType","PointerType","PointerType","PointerType","PtrConvType","PtrConvType","StringRadix","StructType","StructType","StructType","StructType","ValueType","ValueType","ValueType","VectorType","VectorType","VectorType","VectorType","VoidType","VoidType","array_type","array_type","array_type","array_type","array_type","array_type","array_type","array_type","as_any_type_enum","as_any_type_enum","as_basic_type_enum","as_basic_type_enum","as_type_ref","as_type_ref","as_type_ref","as_type_ref","as_type_ref","as_type_ref","as_type_ref","as_type_ref","as_type_ref","as_type_ref","as_type_ref","as_type_ref","as_type_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","const_all_ones","const_array","const_array","const_array","const_array","const_array","const_array","const_float","const_float_from_string","const_int","const_int_arbitrary_precision","const_int_from_string","const_named_struct","const_null","const_vector","const_zero","const_zero","const_zero","const_zero","const_zero","const_zero","const_zero","count_fields","count_param_types","create_generic_value","create_generic_value","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_type","fn_type","fn_type","fn_type","fn_type","fn_type","fn_type","fn_type","fn_type","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_address_space","get_alignment","get_alignment","get_alignment","get_alignment","get_alignment","get_alignment","get_bit_width","get_context","get_context","get_context","get_context","get_context","get_context","get_context","get_context","get_element_type","get_element_type","get_element_type","get_field_type_at_index","get_field_types","get_name","get_param_types","get_return_type","get_size","get_undef","get_undef","get_undef","get_undef","get_undef","get_undef","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into_array_type","into_array_type","into_array_type","into_float_type","into_float_type","into_float_type","into_function_type","into_int_type","into_int_type","into_int_type","into_metadata_type","into_pointer_type","into_pointer_type","into_pointer_type","into_struct_type","into_struct_type","into_struct_type","into_vector_type","into_vector_type","into_vector_type","into_void_type","is_array_type","is_array_type","is_array_type","is_float_type","is_float_type","is_float_type","is_function_type","is_int_type","is_int_type","is_int_type","is_metadata_type","is_opaque","is_packed","is_pointer_type","is_pointer_type","is_pointer_type","is_sized","is_sized","is_sized","is_sized","is_struct_type","is_struct_type","is_struct_type","is_var_arg","is_vector_type","is_vector_type","is_vector_type","is_void_type","len","matches_str","new","new","new","new","new","new","new","new","new","new","print_to_string","print_to_string","print_to_string","print_to_string","print_to_string","print_to_string","print_to_string","print_to_string","print_to_string","print_to_string","print_to_string","print_to_string","print_to_string","print_to_string","ptr_type","ptr_type","ptr_type","ptr_type","ptr_type","ptr_type","ptr_type","ptr_type","ptr_type","set_body","size_of","size_of","size_of","size_of","size_of","size_of","size_of","size_of","size_of","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vec_type","vec_type","vec_type","AShr","Add","AddrSpaceCast","AggregateValue","AggregateValueEnum","Alloca","And","AnyValue","AnyValueEnum","ArrayValue","ArrayValue","ArrayValue","ArrayValue","ArrayValue","AsValueRef","AtomicCmpXchg","AtomicRMW","BaseType","BaseType","BaseType","BasicMetadataValueEnum","BasicValue","BasicValueEnum","BasicValueUse","BitCast","Br","Call","CallSiteValue","CallableValue","CatchPad","CatchRet","CatchSwitch","CleanupPad","CleanupRet","ExtractElement","ExtractValue","FAdd","FCmp","FDiv","FIRST_CUSTOM_METADATA_KIND_ID","FMul","FPExt","FPToSI","FPToUI","FPTrunc","FRem","FSub","Fence","FloatMathValue","FloatValue","FloatValue","FloatValue","FloatValue","FunctionValue","FunctionValue","GenericValue","GetElementPtr","GlobalValue","ICmp","IndirectBr","InsertElement","InsertValue","InstructionOpcode","InstructionValue","InstructionValue","IntMathValue","IntToPtr","IntValue","IntValue","IntValue","IntValue","Invoke","LShr","LandingPad","Load","MetadataValue","MetadataValue","MetadataValue","Mul","Or","Phi","PhiValue","PhiValue","PointerMathValue","PointerValue","PointerValue","PointerValue","PointerValue","PtrToInt","Resume","Return","SDiv","SExt","SIToFP","SRem","Select","Shl","ShuffleVector","Store","StructValue","StructValue","StructValue","StructValue","StructValue","Sub","Switch","Trunc","UDiv","UIToFP","URem","Unreachable","UserOp1","UserOp2","VAArg","VectorValue","VectorValue","VectorValue","VectorValue","Xor","ZExt","add_attribute","add_attribute","add_incoming","as_aggregate_value_enum","as_aggregate_value_enum","as_any_value_enum","as_any_value_enum","as_basic_value","as_basic_value_enum","as_basic_value_enum","as_float","as_global_value","as_instruction","as_instruction","as_instruction","as_instruction","as_instruction","as_instruction","as_instruction","as_instruction_value","as_instruction_value","as_int","as_pointer_value","as_type_ref","as_value_ref","as_value_ref","as_value_ref","as_value_ref","as_value_ref","as_value_ref","as_value_ref","as_value_ref","as_value_ref","as_value_ref","as_value_ref","as_value_ref","as_value_ref","as_value_ref","as_value_ref","as_value_ref","as_value_ref","as_value_ref","attributes","attributes","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","const_add","const_add","const_address_space_cast","const_and","const_ashr","const_bit_cast","const_cast","const_cast","const_cast","const_compare","const_div","const_exact_signed_div","const_exact_unsigned_div","const_extend","const_extract_element","const_extract_value","const_extract_value","const_gep","const_in_bounds_gep","const_insert_element","const_insert_value","const_insert_value","const_int_compare","const_mul","const_mul","const_neg","const_neg","const_not","const_nsw_add","const_nsw_mul","const_nsw_neg","const_nsw_sub","const_nuw_add","const_nuw_mul","const_nuw_neg","const_nuw_sub","const_or","const_remainder","const_rshr","const_s_extend","const_s_extend_or_bit_cast","const_select","const_select","const_shl","const_shuffle_vector","const_signed_div","const_signed_remainder","const_signed_to_float","const_sub","const_sub","const_to_int","const_to_pointer","const_to_signed_int","const_to_unsigned_int","const_truncate","const_truncate","const_truncate_or_bit_cast","const_unsigned_div","const_unsigned_remainder","const_unsigned_to_float","const_xor","const_z_ext","const_z_ext_or_bit_cast","count_arguments","count_attributes","count_attributes","count_basic_blocks","count_incoming","count_params","create","create_generic_value_of_pointer","delete","delete","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","erase_from_basic_block","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_alignment","get_alignment","get_atomic_ordering","get_basic_blocks","get_call_convention","get_call_conventions","get_called_fn_value","get_constant","get_dll_storage_class","get_element_as_constant","get_enum_attribute","get_enum_attribute","get_fcmp_predicate","get_first_basic_block","get_first_param","get_first_use","get_first_use","get_first_use","get_gc","get_icmp_predicate","get_incoming","get_initializer","get_instruction_with_name","get_intrinsic_id","get_last_basic_block","get_last_param","get_linkage","get_linkage","get_metadata","get_name","get_name","get_name","get_name","get_name","get_name","get_name","get_name","get_name","get_name","get_name","get_next_function","get_next_global","get_next_instruction","get_next_use","get_node_size","get_node_values","get_nth_param","get_num_operands","get_opcode","get_operand","get_operand_use","get_param_iter","get_params","get_parent","get_personality_function","get_previous_function","get_previous_global","get_previous_instruction","get_section","get_section","get_sign_extended_constant","get_string_attribute","get_string_attribute","get_string_constant","get_string_value","get_thread_local_mode","get_type","get_type","get_type","get_type","get_type","get_type","get_type","get_type","get_type","get_type","get_used_value","get_user","get_visibility","get_volatile","get_zero_extended_constant","has_metadata","has_personality_function","has_unnamed_addr","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","int_width","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_array_value","into_array_value","into_array_value","into_array_value","into_float_value","into_float_value","into_float_value","into_function_value","into_instruction_value","into_int_value","into_int_value","into_int_value","into_metadata_value","into_phi_value","into_pointer","into_pointer_value","into_pointer_value","into_pointer_value","into_struct_value","into_struct_value","into_struct_value","into_struct_value","into_vector_value","into_vector_value","into_vector_value","is_array_value","is_array_value","is_array_value","is_array_value","is_const","is_const","is_const","is_const","is_const","is_const_string","is_constant","is_constant_data_vector","is_constant_int","is_constant_vector","is_declaration","is_externally_initialized","is_float_value","is_float_value","is_float_value","is_function_value","is_instruction_value","is_int_value","is_int_value","is_int_value","is_metadata_value","is_node","is_null","is_null","is_null","is_null","is_null","is_null","is_null","is_null","is_phi_value","is_pointer_value","is_pointer_value","is_pointer_value","is_string","is_struct_value","is_struct_value","is_struct_value","is_struct_value","is_tail_call","is_tail_call","is_thread_local","is_undef","is_undef","is_undef","is_undef","is_undef","is_undef","is_undef","is_undef","is_vector_value","is_vector_value","is_vector_value","new","new","new","new","new","new","new","new","new","new","print_to_stderr","print_to_stderr","print_to_stderr","print_to_stderr","print_to_stderr","print_to_stderr","print_to_stderr","print_to_stderr","print_to_string","print_to_string","remove_enum_attribute","remove_enum_attribute","remove_from_basic_block","remove_string_attribute","remove_string_attribute","replace_all_uses_with","replace_all_uses_with","replace_all_uses_with","replace_all_uses_with","replace_all_uses_with","replace_all_uses_with","replace_all_uses_with","replace_all_uses_with","replace_all_uses_with","replace_all_uses_with","run_in_pass_manager","set_alignment","set_alignment","set_alignment_attribute","set_atomic_ordering","set_call_convention","set_call_conventions","set_constant","set_dll_storage_class","set_externally_initialized","set_gc","set_initializer","set_linkage","set_linkage","set_metadata","set_name","set_name","set_name","set_name","set_name","set_name","set_name","set_name","set_name","set_name","set_name","set_name","set_operand","set_param_alignment","set_personality_function","set_section","set_section","set_tail_call","set_thread_local","set_thread_local_mode","set_unnamed_addr","set_visibility","set_volatile","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_as_basic_value","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify","view_function_cfg","view_function_cfg_only"],"q":[[0,"inkwell"],[235,"inkwell::attributes"],[277,"inkwell::basic_block"],[310,"inkwell::builder"],[416,"inkwell::context"],[509,"inkwell::data_layout"],[522,"inkwell::execution_engine"],[617,"inkwell::intrinsics"],[631,"inkwell::memory_buffer"],[650,"inkwell::module"],[762,"inkwell::object_file"],[863,"inkwell::passes"],[986,"inkwell::support"],[1010,"inkwell::support::error_handling"],[1012,"inkwell::targets"],[1209,"inkwell::types"],[1690,"inkwell::values"]],"d":["","","Adds to the value in memory and returns the prior value.","Defines the address space in which a global will be …","","Bitwise and into memory and returns the prior value.","","","","","","","Equal","","Defines how to compare a <code>left</code> and <code>right</code> <code>FloatValue</code>.","","","","","","This enum defines how to compare a <code>left</code> and <code>right</code> <code>IntValue</code>.","","","","Sets memory to the signed-greater of the value provided …","Sets memory to the signed-lesser of the value provided and …","","Not Equal","Bitwise nands into memory and returns the prior value.","","","Returns true if <code>left</code> == <code>right</code> and neither are NaN","Returns true if <code>left</code> &gt;= <code>right</code> and neither are NaN","Returns true if <code>left</code> &gt; <code>right</code> and neither are NaN","Returns true if <code>left</code> &lt;= <code>right</code> and neither are NaN","Returns true if <code>left</code> &lt; <code>right</code> and neither are NaN","Returns true if <code>left</code> != <code>right</code> and neither are NaN","Returns true if neither value is NaN","Defines the optimization level used to compile a <code>Module</code>.","Bitwise ors into memory and returns the prior value.","Always returns false","Always returns true","","","Signed Greater Than or Equal","Signed Greater Than","Signed Less Than or Equal","Signed Less Than","","Subtract a value off the value in memory and returns the …","","Returns true if <code>left</code> == <code>right</code> or either is NaN","Unsigned Greater Than or Equal","Returns true if <code>left</code> &gt;= <code>right</code> or either is NaN","Unsigned Greater Than","Returns true if <code>left</code> &gt; <code>right</code> or either is NaN","Unsigned Less Than or Equal","Returns true if <code>left</code> &lt;= <code>right</code> or either is NaN","Unsigned Less Than","Returns true if <code>left</code> &lt; <code>right</code> or either is NaN","Sets memory to the unsigned-greater of the value provided …","Sets memory to the unsigned-lesser of the value provided …","Returns true if <code>left</code> != <code>right</code> or either is NaN","Returns true if either value is NaN","","Stores to memory and returns the prior value.","Bitwise xors into memory and returns the prior value.","<code>Attribute</code>s are optional modifiers to functions, function …","A <code>BasicBlock</code> is a container of instructions.","","","","","","","","","","","","","","","","","","","A <code>Builder</code> enables you to build instructions.","","","","","","","","","","","","","","","","","","","","","","","","","A <code>Context</code> is an opaque owner and manager of core global …","","","Returns the default value for <code>OptimizationLevel</code>, namely …","Returns the default value for <code>GlobalVisibility</code>, namely …","Returns the default value for <code>DLLStorageClass</code>, namely …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","A <code>Module</code> represets a single code compilation unit.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A type is a classification which determines how data is …","A value is an instance of a type.","Functions, function parameters, and return types can have …","An <code>AttributeLoc</code> determines where on a function an …","Assign to the <code>FunctionValue</code> itself.","Assign to one of the <code>FunctionValue</code>’s params (0-indexed).","Assign to the <code>FunctionValue</code>’s return type.","Acquires the underlying raw pointer belonging to this …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Gets the kind id associated with an enum <code>Attribute</code>.","Gets the value associated with an enum <code>Attribute</code>.","Gets the last enum kind id associated with builtin names.","Gets the enum kind id associated with a builtin name.","Gets the string kind id associated with a string attribute.","Gets the string value associated with a string attribute.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Determines whether or not an <code>Attribute</code> is an enum. This …","Determines whether or not an <code>Attribute</code> is a string. This …","Creates a new <code>Attribute</code> from a raw pointer.","","","","","","","","","A <code>BasicBlock</code> is a container of instructions.","Acquires the underlying raw pointer belonging to this …","","","","","Removes this <code>BasicBlock</code> completely from memory. This is …","","","","Returns the argument unchanged.","Gets the address of this <code>BasicBlock</code> if possible. Returns …","Obtains the <code>ContextRef</code> this <code>BasicBlock</code> belongs to.","Obtains the first <code>InstructionValue</code> in this <code>BasicBlock</code>, if …","Gets the first use of this <code>BasicBlock</code> if any.","Performs a linear lookup to obtain a instruction based on …","Obtains the last <code>InstructionValue</code> in this <code>BasicBlock</code>, if …","Gets the name of a <code>BasicBlock</code>.","Gets the <code>BasicBlock</code> succeeding the current one, in its own …","Obtains the <code>FunctionValue</code> that this <code>BasicBlock</code> belongs to, …","Gets the <code>BasicBlock</code> preceeding the current one, in its own …","Obtains the terminating <code>InstructionValue</code> in this <code>BasicBlock</code>…","","Calls <code>U::from(self)</code>.","Appends one <code>BasicBlock</code> after another. It returns <code>Err(())</code> …","Prepends one <code>BasicBlock</code> before another. It returns <code>Err(())</code> …","Removes this <code>BasicBlock</code> from its parent <code>FunctionValue</code>. It …","Replaces all uses of this basic block with another.","Set name of the <code>BasicBlock</code>.","","","","","","Acquires the underlying raw pointer belonging to this …","","","","Builds a function return instruction for a return type …","","","","","Builds an atomicrmw instruction. It allows you to …","Builds a bitcast instruction. A bitcast reinterprets the …","Builds a function call instruction. <code>FunctionValue</code>s can be …","","Builds a cmpxchg instruction. It allows you to atomically …","","Builds an extract element instruction which extracts a …","Builds an extract value instruction which extracts a …","","","","","","","","","","","","","","","GEP is very likely to segfault if indexes are used …","","","GEP is very likely to segfault if indexes are used …","","Builds an insert element instruction which inserts a …","Builds an insert value instruction which inserts a …","","","","","","","","","","","","","","","","","","","","","","","","","","","An invoke is similar to a normal function call, but used to","","","Landing pads are places where control flow jumps to if a …","Builds an <code>IntValue</code> containing the result of a logical left …","Builds a load instruction. It allows you to retrieve a …","","","","","","Builds an instruction which calculates the difference of …","","Resume propagation of an existing (in-flight) exception …","Builds a function return instruction. It should be …","Builds an <code>IntValue</code> containing the result of a right shift …","","","","Builds a store instruction. It allows you to store a value …","Builds a GEP instruction on a struct pointer. Returns …","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","This trait abstracts an LLVM <code>Context</code> type and should be …","A <code>Context</code> is a container for all LLVM entities including …","A <code>ContextRef</code> is a smart pointer allowing borrowed access …","Append a named <code>BasicBlock</code> at the end of the referenced …","Append a named <code>BasicBlock</code> at the end of the referenced …","Returns the internal LLVM reference behind the type","Acquires the underlying raw pointer belonging to this …","Acquires the underlying raw pointer belonging to this …","Gets the <code>IntType</code> representing 1 bit width. It will be …","Gets the <code>IntType</code> representing 1 bit width. It will be …","","","","","Creates a const string which may be null terminated.","Creates a const string which may be null terminated.","Creates a constant <code>StructValue</code> from constant values.","Creates a constant <code>StructValue</code> from constant values.","Creates a new <code>Context</code>.","Creates a new <code>Builder</code> for a <code>Context</code>.","Creates a new <code>Builder</code> for a <code>Context</code>.","Creates an enum <code>Attribute</code> in this <code>Context</code>.","Creates an enum <code>Attribute</code> in this <code>Context</code>.","Creates a inline asm function pointer.","Creates a inline asm function pointer.","Creates a new <code>Module</code> for a <code>Context</code>.","Creates a new <code>Module</code> for a <code>Context</code>.","Creates a new <code>Module</code> for the current <code>Context</code> from a …","Creates a new <code>Module</code> for the current <code>Context</code> from a …","Creates a string <code>Attribute</code> in this <code>Context</code>.","Creates a string <code>Attribute</code> in this <code>Context</code>.","Gets the <code>IntType</code> representing a custom bit width. It will …","Gets the <code>IntType</code> representing a custom bit width. It will …","","","","","","","","Gets the <code>FloatType</code> representing a 128 bit width. It will …","Gets the <code>FloatType</code> representing a 128 bit width. It will …","Gets the <code>FloatType</code> representing a 16 bit width. It will be …","Gets the <code>FloatType</code> representing a 16 bit width. It will be …","Gets the <code>FloatType</code> representing a 32 bit width. It will be …","Gets the <code>FloatType</code> representing a 32 bit width. It will be …","Gets the <code>FloatType</code> representing a 64 bit width. It will be …","Gets the <code>FloatType</code> representing a 64 bit width. It will be …","","","Returns the argument unchanged.","Returns the argument unchanged.","Gets a <code>Mutex&lt;Context&gt;</code> which points to the global context …","Obtains the index of a metadata kind id. If the string …","Obtains the index of a metadata kind id. If the string …","Gets the <code>IntType</code> representing 128 bit width. It will be …","Gets the <code>IntType</code> representing 128 bit width. It will be …","Gets the <code>IntType</code> representing 16 bit width. It will be …","Gets the <code>IntType</code> representing 16 bit width. It will be …","Gets the <code>IntType</code> representing 32 bit width. It will be …","Gets the <code>IntType</code> representing 32 bit width. It will be …","Gets the <code>IntType</code> representing 64 bit width. It will be …","Gets the <code>IntType</code> representing 64 bit width. It will be …","Gets the <code>IntType</code> representing 8 bit width. It will be …","Gets the <code>IntType</code> representing 8 bit width. It will be …","Append a named <code>BasicBlock</code> after the referenced <code>BasicBlock</code>.","Append a named <code>BasicBlock</code> after the referenced <code>BasicBlock</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a <code>MetadataValue</code> tuple of heterogeneous types (a “…","Creates a <code>MetadataValue</code> tuple of heterogeneous types (a “…","Creates a <code>MetadataValue</code> string for the current context. It …","Creates a <code>MetadataValue</code> string for the current context. It …","Creates an opaque <code>StructType</code> with no type definition yet …","Creates an opaque <code>StructType</code> with no type definition yet …","Gets the <code>FloatType</code> representing a 128 bit width. It will …","Gets the <code>FloatType</code> representing a 128 bit width. It will …","Prepend a named <code>BasicBlock</code> before the referenced <code>BasicBlock</code>…","Prepend a named <code>BasicBlock</code> before the referenced <code>BasicBlock</code>…","Gets the <code>IntType</code> representing a bit width of a pointer. It …","Gets the <code>IntType</code> representing a bit width of a pointer. It …","Creates a <code>StructType</code> definiton from heterogeneous types in …","Creates a <code>StructType</code> definiton from heterogeneous types in …","","","","","","","Gets the <code>VoidType</code>. It will be assigned the current context.","Gets the <code>VoidType</code>. It will be assigned the current context.","Gets the <code>FloatType</code> representing a 80 bit width. It will be …","Gets the <code>FloatType</code> representing a 80 bit width. It will be …","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","A reference-counted wrapper around LLVM’s execution …","","","","","A wrapper around a function pointer which ensures the …","","","","Marker trait representing an unsafe function pointer (…","Maps the specified value to an address.","Adds a module to an <code>ExecutionEngine</code>.","Acquires the underlying raw pointer belonging to this …","Returns the raw function pointer. This function is unsafe …","","","","","","","","","This method allows you to call the underlying function …","This method allows you to call the underlying function …","This method allows you to call the underlying function …","This method allows you to call the underlying function …","This method allows you to call the underlying function …","This method allows you to call the underlying function …","This method allows you to call the underlying function …","This method allows you to call the underlying function …","This method allows you to call the underlying function …","This method allows you to call the underlying function …","This method allows you to call the underlying function …","This method allows you to call the underlying function …","This method allows you to call the underlying function …","This method allows you to call the underlying function …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Try to load a function from the execution engine.","Attempts to look up a function’s address by its name. …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the raw function pointer, consuming self in the …","This function probably doesn’t need to be called, but is …","This function probably doesn’t need to be called, but is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Gets a byte slice of this <code>MemoryBuffer</code>.","","","","This function is likely slightly cheaper than …","This will create a new <code>MemoryBuffer</code> from the given input.","","Convert this <code>MemoryBuffer</code> into an <code>ObjectFile</code>. LLVM does …","","","Returns the argument unchanged.","Gets the byte size of this <code>MemoryBuffer</code>.","Calls <code>U::from(self)</code>.","","","","","<code>Appending</code> linkage may only be applied to global variables …","Globals with <code>AvailableExternally</code> linkage are never emitted …","<code>Common</code> linkage is most similar to “weak” linkage, but …","<code>DLLExport</code> causes the compiler to provide a global pointer …","<code>DLLImport</code> causes the compiler to reference a function or …","If none of the other identifiers are used, the global is …","The semantics of this linkage follow the ELF object file …","Iterate over all <code>FunctionValue</code>s in an llvm module","FIXME: Unknown linkage type","Iterate over all <code>GlobalValue</code>s in an llvm module","Similar to private, but the value shows as a local symbol …","Globals with <code>LinkOnceAny</code> linkage are merged with other …","Some languages allow differing globals to be merged, such …","FIXME: Unknown linkage type","This enum defines how to link a global variable or …","FIXME: Unknown linkage type","FIXME: Unknown linkage type","Represents a reference to an LLVM <code>Module</code>. The underlying …","Global values with <code>Private</code> linkage are only directly …","<code>WeakAny</code> linkage has the same merging semantics as linkonce …","Some languages allow differing globals to be merged, such …","Creates a function given its <code>name</code> and <code>ty</code>, adds it to the …","Creates a <code>GlobalValue</code> based on a type in an address space.","Appends a <code>MetaDataValue</code> to a global list indexed by a …","Acquires the underlying raw pointer belonging to this …","","","","","","","","","","","","","","","Creates an <code>ExecutionEngine</code> from this <code>Module</code>.","Creates an interpreter <code>ExecutionEngine</code> from this <code>Module</code>.","Creates a JIT <code>ExecutionEngine</code> from this <code>Module</code>.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the <code>Context</code> from which this <code>Module</code> originates.","Gets a smart pointer to the <code>DataLayout</code> belonging to a …","Gets the first <code>FunctionValue</code> defined in this <code>Module</code>.","Gets the first <code>GlobalValue</code> in a module.","Gets a <code>FunctionValue</code> defined in this <code>Module</code> by its name.","An iterator over the functions in this <code>Module</code>.","Gets a named <code>GlobalValue</code> in a module.","Obtains the global <code>MetaDataValue</code> node indexed by key, …","Obtains the number of <code>MetaDataValue</code>s indexed by a …","An iterator over the globals in this <code>Module</code>.","Gets the last <code>FunctionValue</code> defined in this <code>Module</code>.","Gets the last <code>GlobalValue</code> in a module.","Gets the name of this <code>Module</code>.","Gets a named <code>StructType</code> from this <code>Module</code>’s <code>Context</code>.","Gets the <code>TargetTriple</code> assigned to this <code>Module</code>. If none has …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Links one module into another. This will merge two <code>Module</code>s …","","","Creates a new <code>Module</code> from a <code>MemoryBuffer</code> with bitcode.","A convenience function for creating a <code>Module</code> from a …","","Prints the content of the <code>Module</code> to a file.","Prints the content of the <code>Module</code> to stderr.","Prints the content of the <code>Module</code> to an <code>LLVMString</code>.","","Sets the <code>DataLayout</code> for a particular <code>Module</code>.","Sets the inline assembly for the <code>Module</code>.","Assigns the name of this <code>Module</code>.","Assigns a <code>TargetTriple</code> to this <code>Module</code>.","","","Prints the content of the <code>Module</code> to a <code>String</code>.","","","","","","","","","","","","","Ensures that the current <code>Module</code> is valid, and returns a …","<code>write_bitcode_to_path</code> should be preferred over this …","Writes this <code>Module</code> to a <code>MemoryBuffer</code>.","Writes a <code>Module</code> to a <code>Path</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A manager for running optimization and simplification …","","","","ADCE aggressively tries to eliminate code. This pass is …","No LLVM documentation is available at this time.","A custom inliner that handles only functions that are …","This pass promotes “by reference” arguments to be “…","A basic alias analysis pass that implements identities …","This pass combines instructions inside basic blocks to form","No LLVM documentation is available at this time.","Performs dead code elimination and basic block merging. …","Merges duplicate global constants together into a single …","This pass implements constant propagation and merging. It …","No LLVM documentation is available at this time.","This pass deletes dead arguments from internal functions. …","A trivial dead store elimination that only considers …","This file promotes memory references to be register …","No LLVM documentation is available at this time.","No LLVM documentation is available at this time.","A simple interprocedural pass which walks the call-graph, …","Bottom-up inlining of functions into callees.","This transform is designed to eliminate unreachable …","This pass transforms simple global variables that never …","This pass performs global value numbering to eliminate …","This transformation analyzes and transforms the induction …","Combine instructions to form fewer, simple instructions. …","This pass loops over all of the functions in the input …","This pass implements an extremely simple interprocedural …","An interprocedural variant of Sparse Conditional Constant …","Jump threading tries to find distinct threads of control …","This pass performs loop invariant code motion, attempting …","This file implements the Dead Loop Deletion Pass. This …","No LLVM documentation is available at this time.","No LLVM documentation is available at this time.","A simple loop rotation transformation.","This pass implements a simple loop unroller. It works best …","This pass transforms loops that contain branches on …","No LLVM documentation is available at this time.","No LLVM documentation is available at this time.","Rewrites switch instructions with a sequence of branches, …","This pass performs various transformations related to …","No LLVM documentation is available at this time.","This pass performs global value numbering to eliminate …","This pass performs partial inlining, typically by inlining …","This file promotes memory references to be register …","This file implements a simple interprocedural pass which …","This pass reassociates commutative expressions in an order …","No LLVM documentation is available at this time.","The well-known scalar replacement of aggregates …","No LLVM documentation is available at this time.","No LLVM documentation is available at this time.","Sparse conditional constant propagation and merging, which …","No LLVM documentation is available at this time.","No LLVM documentation is available at this time.","No LLVM documentation is available at this time.","This pass loops over all of the functions in the input …","Performs code stripping. This transformation can delete:","This file transforms calls of the current function (self …","No LLVM documentation is available at this time.","Verifies an LLVM IR code. This is useful to run after an …","Acquires the underlying raw pointer belonging to this …","Acquires the underlying raw pointer belonging to this …","Acquires the underlying raw pointer belonging to this …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Populates a PassManager with the expectation of function …","Populates a PassManager with the expectation of link time …","Populates a PassManager with the expectation of whole …","","This method returns true if any of the passes modified the …","","","","","","","","","","","","","","","","An owned LLVM String. Also known as a LLVM Message","","","","","","","","","","This module contains some supplemental functions for …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Determines whether or not LLVM has been configured to run …","","","This function is very unsafe. Any reference to LLVM data …","","This is a convenience method for creating a Rust <code>String</code>, …","","","","Installs an error handler to be called before LLVM exits.","Resets LLVM’s fatal error handler back to the default","","","","","","","","","","","","","","","","","","","","","","","","","Acquires the underlying raw pointer belonging to this …","Acquires the underlying raw pointer belonging to this …","Acquires the underlying raw pointer belonging to this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Gets the default triple for the current system.","","","","","","","","","","","Create TargetData from this target machine","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Gets the <code>IntType</code> representing a bit width of a pointer. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Saves a <code>TargetMachine</code> to a file.","Writes a <code>TargetMachine</code> to a <code>MemoryBuffer</code>.","Alphanumeric, 0-9 and all 26 letters in upper or lowercase.","Represents any LLVM type.","A wrapper for any <code>BasicType</code>, <code>VoidType</code>, or <code>FunctionType</code>.","An <code>ArrayType</code> is the type of contiguous constants or …","A contiguous homogeneous container type.","A contiguous homogeneous container type.","","Accessor to the inner LLVM type reference","","Represents a basic LLVM type, that may be used in …","A wrapper for any <code>BasicType</code>.","Binary 0 or 1","Decimal 0-9","Represents an LLVM type that can have floating point math …","A <code>FloatType</code> is the type of a floating point constant or …","A floating point type.","A floating point type.","","A <code>FunctionType</code> is the type of a function variable.","A function return and parameter definition.","Hexadecimal with upper or lowercase letters up to F.","Represents an LLVM type that can have integer math …","An <code>IntType</code> is the type of an integer constant or variable.","An integer type.","An integer type.","","The type for int to float or int vector to float vector …","The type for float to int or float vector to int vector …","A <code>MetadataType</code> is the type of a metadata.","","Octal 0-7","Represents an LLVM type that can have pointer operations …","A <code>PointerType</code> is the type of a pointer constant or …","A pointer type.","A pointer type.","","The type for int to pointer or int vector to pointer …","The type for pointer to int or pointer vector to int …","How to interpret a string or digits used to construct an …","A <code>StructType</code> is the type of a heterogeneous container of …","A contiguous heterogeneous container type.","A contiguous heterogeneous container type.","","The value instance of an int or int vector type.","The value instance of a float or float vector type.","The value instance of a pointer type.","A <code>VectorType</code> is the type of a multiple value SIMD constant …","A contiguous homogeneous “SIMD” container type.","A contiguous homogeneous “SIMD” container type.","","A <code>VoidType</code> is a special type with no possible direct …","A valueless type.","Create an <code>ArrayType</code> with this <code>BasicType</code> as its elements.","Create an <code>ArrayType</code> with this <code>BasicType</code> as its elements.","Creates an <code>ArrayType</code> with this <code>ArrayType</code> for its element …","Creates an <code>ArrayType</code> with this <code>FloatType</code> for its element …","Creates an <code>ArrayType</code> with this <code>IntType</code> for its element …","Creates an <code>ArrayType</code> with this <code>PointerType</code> for its element …","Creates an <code>ArrayType</code> with this <code>StructType</code> for its element …","Creates an <code>ArrayType</code> with this <code>VectorType</code> for its element …","Returns an <code>AnyTypeEnum</code> that represents the current type.","Returns an <code>AnyTypeEnum</code> that represents the current type.","Returns a <code>BasicTypeEnum</code> that represents the current type.","Returns a <code>BasicTypeEnum</code> that represents the current type.","Returns the internal LLVM reference behind the type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an <code>IntValue</code> representing a constant value of all …","Creates a constant <code>ArrayValue</code>.","Creates a constant <code>ArrayValue</code>.","Creates a constant <code>ArrayValue</code>.","Creates a constant <code>ArrayValue</code>.","Creates a constant <code>ArrayValue</code>.","Creates a constant <code>ArrayValue</code>.","Creates a <code>FloatValue</code> repesenting a constant value of this …","Create a <code>FloatValue</code> from a string. LLVM provides no error …","Creates an <code>IntValue</code> repesenting a constant value of this …","Create a constant <code>IntValue</code> of arbitrary precision.","Create an <code>IntValue</code> from a string and radix. LLVM provides …","Creates a <code>StructValue</code> based on this <code>StructType</code>’s …","Creates a null <code>PointerValue</code> of this <code>PointerType</code>. It will …","Creates a constant <code>VectorValue</code>.","Creates a constant zero value of this <code>ArrayType</code>.","Creates a constant <code>BasicValueZero</code>.","Creates a constant zero value of this <code>FloatType</code>.","Creates a constant zero value of this <code>IntType</code>.","Creates a constant null value of this <code>PointerType</code>. This is …","Creates a constant zero value of this <code>StructType</code>.","Creates a constant zero value of this <code>VectorType</code>.","Counts the number of field types.","Counts the number of param types this <code>FunctionType</code> has.","Creates a <code>GenericValue</code> for use with <code>ExecutionEngine</code>s.","Creates a <code>GenericValue</code> for use with <code>ExecutionEngine</code>s.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a <code>FunctionType</code> with this <code>BasicType</code> as its return …","Create a <code>FunctionType</code> with this <code>BasicType</code> as its return …","Creates a <code>FunctionType</code> with this <code>ArrayType</code> for its return …","Creates a <code>FunctionType</code> with this <code>FloatType</code> for its return …","Creates a <code>FunctionType</code> with this <code>IntType</code> for its return …","Creates a <code>FunctionType</code> with this <code>PointerType</code> for its …","Creates a <code>FunctionType</code> with this <code>StructType</code> for its return …","Creates a <code>FunctionType</code> with this <code>VectorType</code> for its return …","Creates a <code>FunctionType</code> with this <code>VoidType</code> for its return …","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the <code>AddressSpace</code> a <code>PointerType</code> was created with.","Gets the alignment of this <code>ArrayType</code>. Value may vary …","Gets the alignment of this <code>FloatType</code>. Value may vary …","Gets the alignment of this <code>IntType</code>. Value may vary …","Gets the alignment of this <code>PointerType</code>. Value may vary …","Gets the alignment of this <code>StructType</code>. Value may vary …","Gets the alignment of this <code>VectorType</code>. Value may vary …","Gets the bit width of an <code>IntType</code>.","Gets a reference to the <code>Context</code> this <code>ArrayType</code> was created …","Gets a reference to the <code>Context</code> this <code>FloatType</code> was created …","Gets a reference to the <code>Context</code> this <code>FunctionType</code> was …","Gets a reference to the <code>Context</code> this <code>IntType</code> was created …","Gets a reference to the <code>Context</code> this <code>PointerType</code> was …","Gets a reference to the <code>Context</code> this <code>StructType</code> was …","Gets a reference to the <code>Context</code> this <code>VectorType</code> was …","Gets a reference to the <code>Context</code> this <code>VoidType</code> was created …","Gets the element type of this <code>ArrayType</code>.","Gets the element type of this <code>PointerType</code>.","Gets the element type of this <code>VectorType</code>.","Gets the type of a field belonging to this <code>StructType</code>.","Gets this <code>StructType</code>’s field types.","Gets this <code>StructType</code>’s name.","Gets param types this <code>FunctionType</code> has.","Gets the return type of this <code>FunctionType</code>.","Gets the size of this <code>VectorType</code>.","Creates an undefined instance of a <code>ArrayType</code>.","Creates an undefined instance of a <code>FloatType</code>.","Creates an undefined instance of an <code>IntType</code>.","Creates an undefined instance of a <code>PointerType</code>.","Creates an undefined instance of a <code>StructType</code>.","Creates an undefined instance of a <code>VectorType</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Determines whether or not a <code>StructType</code> is opaque.","Determines whether or not a <code>StructType</code> is packed.","","","","Determines whether or not this <code>BasicType</code> is sized or not. …","Determines whether or not this <code>BasicType</code> is sized or not. …","Gets whether or not this <code>FunctionType</code> is sized or not. …","Gets whether or not this <code>VoidType</code> is sized or not. This …","","","","Determines whether or not a <code>FunctionType</code> is a variadic …","","","","","Gets the length of this <code>ArrayType</code>.","Is the string valid for the given radix?","Create <code>ArrayType</code> from <code>LLVMTypeRef</code>","Create <code>AnyTypeEnum</code> from <code>LLVMTypeRef</code>","Create <code>BasicTypeEnum</code> from <code>LLVMTypeRef</code>","Create <code>FloatType</code> from <code>LLVMTypeRef</code>","Create <code>FunctionType</code> from <code>LLVMTypeRef</code>","Create <code>IntType</code> from <code>LLVMTypeRef</code>","Create <code>PointerType</code> from <code>LLVMTypeRef</code>","Create <code>StructType</code> from <code>LLVMTypeRef</code>","Create <code>VectorType</code> from <code>LLVMTypeRef</code>","Create <code>VoidType</code> from <code>LLVMTypeRef</code>","Prints the definition of a Type to a <code>LLVMString</code>.","Prints the definition of a Type to a <code>LLVMString</code>.","Print the definition of an <code>ArrayType</code> to <code>LLVMString</code>","Print the definition of a <code>AnyTypeEnum</code> to <code>LLVMString</code>.","Print the definition of a <code>BasicTypeEnum</code> to <code>LLVMString</code>.","Print the definition of a <code>BasicMetadataTypeEnum</code> to …","Print the definition of a <code>FloatType</code> to <code>LLVMString</code>.","Print the definition of a <code>FunctionType</code> to <code>LLVMString</code>.","Print the definition of an <code>IntType</code> to <code>LLVMString</code>.","Print the definition of a <code>MetadataType</code> to <code>LLVMString</code>.","Print the definition of a <code>PointerType</code> to <code>LLVMString</code>.","Print the definition of a <code>StructType</code> to <code>LLVMString</code>.","Print the definition of a <code>VectorType</code> to <code>LLVMString</code>.","Print the definition of a <code>VoidType</code> to <code>LLVMString</code>.","Create a <code>PointerType</code> that points to this <code>BasicType</code>.","Create a <code>PointerType</code> that points to this <code>BasicType</code>.","Creates a <code>PointerType</code> with this <code>ArrayType</code> for its element …","Creates a <code>PointerType</code> with this <code>FloatType</code> for its element …","Creates a <code>PointerType</code> with this <code>FunctionType</code> for its …","Creates a <code>PointerType</code> with this <code>IntType</code> for its element …","Creates a <code>PointerType</code> with this <code>PointerType</code> for its …","Creates a <code>PointerType</code> with this <code>StructType</code> for its element …","Creates a <code>PointerType</code> with this <code>VectorType</code> for its element …","Defines the body of a <code>StructType</code>.","Gets the size of this <code>BasicType</code>. Value may vary depending …","Gets the size of this <code>BasicType</code>. Value may vary depending …","Gets the size of this <code>ArrayType</code>. Value may vary depending …","","Gets the size of this <code>FloatType</code>. Value may vary depending …","Gets the size of this <code>IntType</code>. Value may vary depending on …","Gets the size of this <code>PointerType</code>. Value may vary …","Gets the size of this <code>StructType</code>. Value may vary depending …","Gets the size of this <code>VectorType</code>. Value may vary depending …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>VectorType</code> with this <code>FloatType</code> for its element …","Creates a <code>VectorType</code> with this <code>IntType</code> for its element …","Creates a <code>VectorType</code> with this <code>PointerType</code> for its element …","","","","Represents an aggregate value, built on top of other …","","","","Defines any struct wrapping an LLVM value.","","An <code>ArrayValue</code> is a block of contiguous constants or …","","","","","","","","","","","","Represents a basic value, which can be used both by …","","A usage of a <code>BasicValue</code> in another value.","","","","A value resulting from a function call. It may have …","A value that can be called with the <code>build_call</code> instruction.","","","","","","","","","","","Value returned by <code>Context::get_kind_id()</code> for the first …","","","","","","","","","Represents a value which is permitted in floating point …","","","","","","","","","","","","","","","","","Represents a value which is permitted in integer math …","","","","","","","","","","","","","","","","A Phi Instruction returns a value based on which basic …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds an <code>Attribute</code> to this <code>CallSiteValue</code>.","Adds an <code>Attribute</code> to a particular location in this …","","Returns an enum containing a typed version of the …","Returns an enum containing a typed version of the …","Returns an enum containing a typed version of <code>AnyValue</code>.","Returns an enum containing a typed version of <code>AnyValue</code>.","","Returns an enum containing a typed version of the …","Returns an enum containing a typed version of the …","","Gets the <code>GlobalValue</code> version of this <code>FunctionValue</code>. This …","Attempt to convert this <code>ArrayValue</code> to an <code>InstructionValue</code>, …","","","","","","","Most <code>BasicValue</code>s are the byproduct of an instruction and …","Most <code>BasicValue</code>s are the byproduct of an instruction and …","","","","","","","","","","","","","","","","","","","","","","Get all <code>Attribute</code>s on this <code>CallSiteValue</code> at an index.","Get all <code>Attribute</code>s belonging to the specified location in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a clone of this <code>InstructionValue</code>, and returns it. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","GEP is very likely to segfault if indexes are used …","GEP is very likely to segfault if indexes are used …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Counts the number of arguments this <code>CallSiteValue</code> was …","Counts the number of <code>Attribute</code>s on this <code>CallSiteValue</code> at …","Counts the number of <code>Attribute</code>s belonging to the specified …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns alignment on a memory access instruction or alloca.","Returns atomic ordering on a memory access instruction.","","Gets the calling convention for this <code>CallSiteValue</code>.","","Gets the <code>FunctionValue</code> this <code>CallSiteValue</code> is based on.","Obtains a constant <code>FloatValue</code>’s value and whether or not …","","","Gets an enum <code>Attribute</code> on this <code>CallSiteValue</code> at an index …","Gets an enum <code>Attribute</code> belonging to the specified location …","Gets the predicate of an <code>FCmp</code> <code>InstructionValue</code>. For …","","","","","Gets the first use of an <code>InstructionValue</code> if any.","","Gets the predicate of an <code>ICmp</code> <code>InstructionValue</code>. For …","","","Get a instruction with it’s name Compares against all …","","","","","","Gets the <code>MetadataValue</code> associated with this <code>Instruction</code> at …","Get name of the <code>ArrayValue</code>. If the value is a constant, …","Gets name of the <code>FloatValue</code>. If the value is a constant, …","Gets the name of a <code>FunctionValue</code>.","Get name of the <code>GlobalValue</code>.","Get name of the <code>InstructionValue</code>.","Gets the name of an <code>IntValue</code>. If the value is a constant, …","Get name of the <code>MetadataValue</code>.","Gets the name of a <code>ArrayValue</code>. If the value is a constant, …","Get name of the <code>PointerValue</code>. If the value is a constant, …","Gets the name of a <code>StructValue</code>. If the value is a …","Gets the name of a <code>VectorValue</code>. If the value is a …","","","","Gets the next use of a <code>BasicBlock</code>, <code>InstructionValue</code> or …","","","","Obtains the number of operands an <code>InstructionValue</code> has. An …","","Obtains the operand an <code>InstructionValue</code> has at a given …","Gets the use of an operand(<code>BasicValue</code>), if any.","","","","","","","","Get the section to which this function belongs","Get section, this global value belongs to","Obtains a constant <code>IntValue</code>’s sign extended value.","Gets a string <code>Attribute</code> on this <code>CallSiteValue</code> at an index …","Gets a string <code>Attribute</code> belonging to the specified …","Obtain the string from the ArrayValue if the value points …","","","Gets the type of this <code>ArrayValue</code>.","","","","","Get type of the current InstructionValue","","","","","Gets the used value (a <code>BasicValueEnum</code> or <code>BasicBlock</code>) of …","Gets the user (an <code>AnyValueEnum</code>) of this use.","","Returns whether or not a memory access instruction is …","Obtains a constant <code>IntValue</code>’s zero extended value.","Determines whether or not this <code>Instruction</code> has any …","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Determines whether or not an <code>ArrayValue</code> is a constant.","Determines whether or not a <code>FloatValue</code> is a constant.","Determines whether or not an <code>IntValue</code> is an <code>llvm::Constant</code>.","Determines whether or not a <code>PointerValue</code> is a constant.","Determines whether or not a <code>VectorValue</code> is a constant.","Determines whether or not an <code>ArrayValue</code> represents a …","","","Determines whether or not an <code>IntValue</code> is an …","","Determines whether or not a <code>GlobalValue</code> is a declaration …","","","","","","","","","","","","Determines whether or not this value is null.","","","","","","","","","","","","","","","","","Determines whether or not this call is a tail call.","","","Determines whether or not this value is undefined.","","","","","","","","","","","","","","","","","","","","","Prints this <code>ArrayValue</code> to standard error.","","","","","","","","Prints a value to a <code>LLVMString</code>","Prints a value to a <code>LLVMString</code>","Removes an enum <code>Attribute</code> on this <code>CallSiteValue</code> at an …","Removes an enum <code>Attribute</code> belonging to the specified …","","Removes a string <code>Attribute</code> on this <code>CallSiteValue</code> at an …","Removes a string <code>Attribute</code> belonging to the specified …","Replaces all uses of this value with another value of the …","","","","","","","","","","","","Sets alignment on a memory access instruction or alloca.","Shortcut for setting the alignment <code>Attribute</code> for this …","Sets atomic ordering on a memory access instruction.","Sets the calling convention for this <code>CallSiteValue</code>.","","","","","","","","","Determines whether or not this <code>Instruction</code> has any …","Sets the name of a <code>BasicValue</code>. If the value is a constant, …","Sets the name of a <code>BasicValue</code>. If the value is a constant, …","Set name of the <code>ArrayValue</code>.","Set name of the <code>BasicValueEnum</code>.","Set name of the <code>FloatValue</code>.","Set name of the <code>GlobalValue</code>.","Set name of the <code>InstructionValue</code>.","Set name of the <code>IntValue</code>.","","Set name of the <code>PointerValue</code>.","Get name of the <code>StructValue</code>.","Set name of the <code>VectorValue</code>.","Sets the operand an <code>InstructionValue</code> has at a given index …","","","Set the section to which this function should belong","Set section, this global value belongs to","Sets whether or not this call is a tail call.","","","","","Sets whether or not a memory access instruction is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Try to convert this <code>CallSiteValue</code> to a <code>BasicValueEnum</code> if …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","View the control flow graph and produce a .dot file","Only view the control flow graph"],"i":[4,4,5,0,6,5,0,0,0,6,7,9,2,9,0,8,0,7,9,8,0,6,8,8,5,5,4,2,5,6,4,3,3,3,3,3,3,3,0,5,3,3,7,4,2,2,2,2,4,5,0,3,2,3,2,3,2,3,2,3,5,5,3,3,4,5,5,0,0,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,2,3,4,5,7,9,0,0,1,6,7,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,1,1,2,2,3,3,4,4,5,5,6,7,7,8,9,9,2,3,4,5,7,9,1,2,2,3,3,4,4,5,5,6,7,7,8,9,9,0,0,0,0,2,3,4,5,7,9,0,0,0,1,2,3,4,5,6,7,8,9,1,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,0,0,0,0,28,28,28,26,26,28,26,28,26,28,26,28,26,28,26,28,26,28,26,28,26,26,26,26,26,26,28,26,28,26,26,26,26,28,26,28,26,28,26,28,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,0,0,62,35,110,62,35,62,35,62,35,62,35,62,35,62,35,62,62,35,62,35,62,35,62,35,62,35,62,35,62,35,62,62,62,35,35,62,35,62,35,62,35,62,35,62,35,62,35,62,35,62,62,35,62,35,62,35,62,35,62,35,62,35,62,35,62,35,62,35,62,35,62,35,62,35,62,35,62,35,62,35,62,35,62,35,62,35,62,35,62,35,0,79,79,79,79,79,79,79,79,79,79,79,79,0,0,90,87,90,0,87,87,0,0,81,81,81,86,90,87,81,86,90,87,81,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,87,81,86,81,86,87,81,90,87,81,90,87,81,90,90,87,87,81,86,81,90,87,81,86,81,81,81,81,90,87,81,86,86,81,81,81,90,87,81,81,81,81,81,81,86,90,87,90,87,81,86,90,87,81,86,90,87,81,86,0,96,96,96,96,96,96,96,96,96,96,96,96,96,0,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,100,100,100,100,100,100,100,0,100,0,100,100,100,100,0,100,100,0,100,100,100,69,69,69,69,100,69,104,105,100,69,104,105,100,69,100,69,100,69,69,69,69,69,100,69,100,69,100,69,104,105,100,100,69,104,105,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,100,100,100,69,104,105,104,105,69,104,105,69,69,100,69,69,69,69,69,69,69,69,100,69,69,100,69,104,105,100,69,104,105,100,69,104,105,69,69,69,69,0,0,0,0,0,0,0,99,115,116,117,118,119,120,99,115,116,117,118,119,120,99,115,116,117,118,119,120,99,115,117,119,99,115,116,117,118,119,120,99,115,116,117,118,119,120,116,120,116,116,120,118,116,99,99,118,118,118,99,115,116,117,118,119,120,115,117,119,99,115,116,117,118,119,120,115,117,119,116,120,99,115,116,117,118,119,120,99,115,116,117,118,119,120,99,115,116,117,118,119,120,124,0,0,0,0,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,125,112,127,125,112,127,125,112,127,124,125,112,125,112,112,125,112,127,125,112,127,127,112,127,127,127,127,127,127,127,127,127,127,127,127,125,112,127,125,112,127,125,125,125,124,112,125,125,125,125,125,125,125,112,127,125,112,127,125,112,127,0,71,71,71,71,71,71,0,71,71,0,71,71,71,71,0,0,71,0,71,71,71,71,71,0,0,139,141,0,0,137,138,138,0,0,137,137,137,141,137,139,138,0,137,138,0,0,0,0,132,133,132,76,109,109,140,140,140,137,138,139,140,109,133,132,141,76,137,138,139,140,109,133,132,141,76,137,138,139,140,141,137,138,139,140,141,109,76,133,140,140,132,76,76,137,138,139,140,109,133,141,76,137,138,139,140,109,133,141,76,137,138,139,140,109,109,133,132,141,76,137,138,139,140,109,133,132,141,76,133,133,76,76,76,76,76,132,76,132,133,132,133,133,133,76,76,76,76,132,132,132,133,133,133,140,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,137,138,139,140,109,133,132,141,76,140,109,133,132,76,76,76,132,137,138,139,140,141,109,137,138,139,140,109,133,132,141,76,137,138,139,140,109,133,132,141,76,137,138,139,140,109,133,132,141,76,132,132,149,0,0,0,145,77,147,0,0,0,0,149,149,0,0,145,77,147,0,145,149,0,0,145,77,147,157,158,0,147,149,0,0,145,77,147,157,159,0,0,145,77,147,157,158,159,0,145,77,147,0,145,44,44,143,72,64,41,75,144,142,142,44,44,160,143,145,77,147,72,67,64,148,41,75,144,78,143,145,77,147,72,67,149,64,148,41,75,144,78,143,145,77,147,72,67,149,64,148,41,75,144,78,143,145,77,147,72,67,149,64,148,41,75,144,78,143,145,77,147,72,67,149,64,148,41,75,144,78,64,143,72,64,41,75,144,72,72,64,64,64,75,41,144,143,77,72,64,41,75,144,75,67,72,64,143,145,77,147,72,67,149,64,148,41,75,144,78,143,145,77,147,72,67,149,64,148,41,75,144,78,143,143,145,145,77,77,147,147,72,72,67,67,149,64,64,148,148,41,41,75,75,144,144,78,78,44,44,143,72,64,41,75,144,78,143,145,145,145,145,145,145,145,145,145,77,77,77,77,77,77,77,147,147,147,147,147,147,147,147,147,72,67,149,64,148,41,75,144,78,41,143,72,64,41,75,144,64,143,72,67,64,41,75,144,78,143,41,144,75,75,75,67,67,144,143,72,64,41,75,144,149,143,145,77,147,72,67,149,64,148,41,75,144,78,145,77,147,145,77,147,145,145,77,147,147,145,77,147,145,77,147,145,77,147,145,145,77,147,145,77,147,145,145,77,147,147,75,75,145,77,147,44,44,67,78,145,77,147,67,145,77,147,145,143,149,143,145,77,72,67,64,41,75,144,78,142,142,143,145,77,147,72,67,64,148,41,75,144,78,44,44,143,72,67,64,41,75,144,75,44,44,143,145,72,64,41,75,144,143,145,77,147,72,67,149,64,148,41,75,144,78,143,145,77,147,72,67,64,148,41,75,144,78,143,143,143,143,145,77,77,77,147,147,72,72,72,72,67,67,149,149,64,64,64,64,148,148,41,41,41,41,75,75,75,75,144,144,144,144,78,78,143,145,77,147,72,67,149,64,148,41,75,144,78,143,145,77,147,72,67,149,64,148,41,75,144,78,72,64,41,52,52,52,0,0,52,52,0,0,0,59,152,42,50,0,52,52,45,57,60,0,0,0,0,52,52,52,0,0,52,52,52,52,52,52,52,52,52,52,0,52,52,52,52,52,52,52,52,0,0,152,42,50,0,152,0,52,0,52,52,52,52,0,0,152,0,52,0,152,42,50,52,52,52,52,0,152,50,52,52,52,0,152,0,0,152,42,50,52,52,52,52,52,52,52,52,52,52,52,0,59,152,42,50,52,52,52,52,52,52,52,52,52,52,0,152,42,50,52,52,51,38,61,55,55,82,82,61,47,47,94,38,66,150,46,61,34,53,54,47,47,94,58,48,161,66,51,59,152,42,50,150,38,58,36,46,74,61,34,53,54,48,51,38,66,37,51,59,152,42,50,150,38,94,58,52,36,46,74,61,34,53,54,48,66,37,51,59,152,42,50,150,38,94,58,52,36,46,74,61,34,53,54,48,66,37,51,59,152,42,50,150,38,58,52,36,46,74,61,34,53,54,66,37,51,59,152,42,50,150,38,58,52,36,46,74,61,34,53,54,150,46,34,46,46,46,150,46,34,150,150,46,46,150,54,55,55,34,34,54,55,55,46,150,46,150,46,46,46,46,46,46,46,46,46,46,46,150,46,46,46,46,54,46,54,46,46,46,150,46,34,46,150,150,150,46,46,46,46,46,46,46,46,51,51,38,38,61,38,38,94,38,58,94,66,66,66,66,66,37,51,59,59,59,152,152,152,152,152,152,152,152,152,152,152,42,42,42,42,42,42,42,50,50,50,50,50,50,50,50,150,150,150,150,38,38,58,52,36,36,46,46,46,46,74,74,74,61,61,34,34,34,34,53,53,53,53,53,54,54,54,54,66,37,51,59,152,42,50,150,38,58,52,36,46,74,61,34,53,54,36,66,66,37,51,51,59,59,152,152,42,42,50,50,150,150,38,38,94,58,58,52,36,36,46,46,74,74,61,61,34,34,53,53,54,54,48,48,66,37,51,59,59,59,152,152,152,152,152,152,152,152,152,152,152,152,42,42,42,42,42,42,42,50,50,50,50,50,50,50,50,50,150,38,94,58,52,52,36,46,74,61,34,53,54,48,48,58,36,36,38,51,38,51,150,58,54,51,38,36,38,38,47,47,36,38,36,61,58,36,38,38,38,38,58,36,66,150,38,58,36,46,74,61,34,53,54,38,58,36,37,74,74,38,36,36,36,36,38,38,36,38,38,58,36,38,58,46,51,38,66,74,58,66,152,42,150,38,36,46,34,53,54,37,37,58,36,46,36,38,58,66,51,59,152,42,50,150,38,58,52,36,46,74,61,34,53,54,94,66,37,51,59,152,42,50,150,38,94,58,52,52,36,46,74,61,34,53,54,48,59,152,42,50,152,42,50,152,152,152,42,50,50,152,94,152,42,50,59,152,42,50,152,42,50,59,152,42,50,66,150,46,34,54,66,58,54,46,54,58,58,152,42,50,152,152,152,42,50,50,74,66,150,38,46,61,34,53,54,152,152,42,50,74,59,152,42,50,51,36,58,66,150,38,46,61,34,53,54,152,42,50,45,57,60,150,46,34,34,54,54,54,66,150,38,46,74,34,53,54,82,82,51,38,36,51,38,66,150,38,36,46,74,61,34,53,54,38,58,36,51,36,51,38,58,58,58,38,58,38,58,36,47,47,66,42,150,58,36,46,61,34,53,54,36,38,38,38,58,51,58,58,58,58,36,66,37,51,59,152,42,50,150,38,58,52,36,46,74,61,34,53,54,66,51,59,152,42,50,150,38,58,36,46,74,61,34,53,54,48,51,66,66,66,66,66,37,51,59,152,42,42,42,50,50,150,150,150,150,150,38,38,94,58,52,36,36,46,46,46,46,46,74,74,74,61,61,61,34,34,34,34,34,53,53,53,53,53,54,54,54,54,48,48,66,37,51,59,152,42,50,150,38,94,58,52,36,46,74,61,34,53,54,48,66,37,51,59,152,42,50,150,38,94,58,52,36,46,74,61,34,53,54,48,38,38,38],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[2,2],10],[[3,3],10],[[4,4],10],[[5,5],10],[[7,7],10],[[9,9],10],0,0,[[],1],[[],6],[[],7],[[],9],[[1,1],11],[[2,2],11],[[3,3],11],[[4,4],11],[[5,5],11],[[6,6],11],[[7,7],11],[[8,8],11],[[9,9],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,[[1,12],13],[[2,12],13],[[3,12],13],[[4,12],13],[[5,12],13],[[6,12],13],[[7,12],13],[[8,12],13],[[9,12],13],[[]],[14,1],[15,2],[[]],[[]],[16,3],[[]],[17,4],[[]],[18,5],[[]],[[]],[19,7],[[]],[20,9],[[]],[[2,21]],[[3,21]],[[4,21]],[[5,21]],[[7,21]],[[9,21]],[[]],[2,15],[[]],[[]],[3,16],[4,17],[[]],[[]],[5,18],[[]],[7,19],[[]],[[]],[[]],[9,20],0,0,0,0,[[2,2],[[22,[10]]]],[[3,3],[[22,[10]]]],[[4,4],[[22,[10]]]],[[5,5],[[22,[10]]]],[[7,7],[[22,[10]]]],[[9,9],[[22,[10]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],23],[24,[[23,[1]]]],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],0,0,0,0,0,0,0,[26,27],[[]],[[]],[[]],[[]],[26,26],[28,28],[[]],[[]],[[26,26],11],[[28,28],11],[[],11],[[],11],[[26,12],13],[[28,12],13],[[]],[[]],[26,24],[26,29],[[],24],[30,24],[26,31],[26,31],[[28,21]],[[]],[[]],[26,11],[26,11],[27,26],[[]],[[]],[[],23],[[],23],[[],23],[[],23],[[],25],[[],25],0,[32,33],[[]],[[]],[32,32],[[]],[32,23],[[32,32],11],[[],11],[[32,12],13],[[]],[32,[[22,[34]]]],[32,35],[32,[[22,[36]]]],[32,[[22,[37]]]],[[32,30],[[22,[36]]]],[32,[[22,[36]]]],[32,31],[32,[[22,[32]]]],[32,[[22,[38]]]],[32,[[22,[32]]]],[32,[[22,[36]]]],[[32,21]],[[]],[[32,32],23],[[32,32],23],[32,23],[[32,32]],[[32,30]],[[]],[[],23],[[],23],[[],25],0,[39,40],[[]],[[]],[[39,34,41,30],34],[[39,[43,[42]]],36],[[39,44,30],34],[[39,45,45,30],45],[[39,44,46,30],34],[[39,44,46,30],[[23,[34,30]]]],[[39,5,34,46,4],[[23,[46,30]]]],[[39,47,44,30],42],[[39,[49,[48]],[43,[50]],30],51],[[39,52,47,44,30],42],[[39,34,47,47,4,4],[[23,[53,30]]]],[[39,46,32,32],36],[[39,54,46,30],42],[[39,55,24,30],[[22,[42]]]],[[39,4,56,30],36],[[39,57,57,30],57],[[39,57,30],57],[[39,3,57,57,30]],[[39,57,57,30],57],[[39,57,30],57],[[39,57,57,30],57],[[39,57,30],57],[[39,57,57,30],57],[[39,57,57,30],57],[[39,57,30]],[[39,57,30]],[[39,57,30],57],[[39,34],36],[[39,34,[43,[46]],30],34],[[39,30,30],58],[[39,30,30],58],[[39,34,[43,[46]],30],34],[[39,47,[43,[32]]],36],[[39,54,47,46,30],54],[[39,55,47,24,30],[[22,[59]]]],[[39,45,45,30],45],[[39,45,30],45],[[39,2,45,45,30]],[[39,45,45,30],45],[[39,45,45,30],45],[[39,45,30],45],[[39,45,45,30],45],[[39,45,45,30],45],[[39,45,30],45],[[39,45,45,30],45],[[39,45,45,30],45],[[39,45,45,30],45],[[39,45,30],45],[[39,45,45,30],45],[[39,45,30],45],[[39,45,30],45],[[39,45,45,30],45],[[39,45,45,30],45],[[39,45,45,30],45],[[39,45,30]],[[39,45,30],45],[[39,45,30],45],[[39,45,45,30],45],[[39,45,45,30],45],[[39,45,30],45],[[39,45,30],45],[[39,[49,[48]],[43,[42]],32,32,30],51],[[39,60,30]],[[39,60,30]],[[39,44,38,[43,[42]],11,30],42],[[39,45,45,30],45],[[39,34,30],42],[[39,44,30],[[23,[34,30]]]],[[39,45,30],45],[[39,45,45,30],45],[[39,44,30],61],[[39,60,30],60],[[39,34,34,30],46],[[39,60,30]],[[39,47],36],[[39,[22,[47]]],36],[[39,45,45,11,30],45],[[39,45,47,47,30],42],[[39,54,54,54,30],54],[[39,45,30]],[[39,34,47],36],[[39,34,24,30],[[23,[34]]]],[[39,46,32,43],36],[[39,32],36],[39,36],[[39,45,30]],[[39,34,44,30],42],[[39,45,45,30],45],[39],[39],[[39,12],13],[[]],[39,[[22,[32]]]],[[39,36,[22,[30]]]],[[]],[40,39],[[39,32,36]],[[39,32]],[[39,36]],[[],23],[[],23],[[],25],0,0,0,[[62,38,30],32],[[35,38,30],32],[[],63],[62,63],[35,63],[62,64],[35,64],[[]],[[]],[[]],[[]],[[62,[43,[65]],11],66],[[35,[43,[65]],11],66],[[62,[43,[42]],11],53],[[35,[43,[42]],11],53],[[],62],[62,39],[35,39],[[62,24,29],26],[[35,24,29],26],[[62,67,68,68,11,11],34],[[35,67,68,68,11,11],34],[[62,30],69],[[35,30],69],[[62,70],[[23,[69,71]]]],[[35,70],[[23,[69,71]]]],[[62,30,30],26],[[35,30,30],26],[[62,24],64],[[35,24],64],[62],[[62,62],11],[[62,35],11],[[35,35],11],[[35,62],11],[[],11],[[],11],[62,72],[35,72],[62,72],[35,72],[62,72],[35,72],[62,72],[35,72],[[62,12],13],[[35,12],13],[[]],[[]],[73],[[62,30],24],[[35,30],24],[62,64],[35,64],[62,64],[35,64],[62,64],[35,64],[62,64],[35,64],[62,64],[35,64],[[62,32,30],32],[[35,32,30],32],[[]],[[]],[[62,[43,[50]]],74],[[35,[43,[50]]],74],[[62,30],74],[[35,30],74],[[62,30],75],[[35,30],75],[62,72],[35,72],[[62,32,30],32],[[35,32,30],32],[[62,76,[22,[1]]],64],[[35,76,[22,[1]]],64],[[62,[43,[77]],11],75],[[35,[43,[77]],11],75],[[],23],[[],23],[[],23],[[],23],[[],25],[[],25],[62,78],[35,78],[62,72],[35,72],0,[79,80],[79,31],[[]],[[]],[[79,79],11],[[],11],[[79,12],13],[[]],[[]],[[],23],[[],23],[[],25],0,0,0,0,0,0,0,0,0,0,[[81,82,83]],[[81,69],23],[81,84],[[[86,[85]]],85],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[86],[86],[86],[86],[86],[86],[86],[86],[86],[86],[86],[86],[86],[86],[87,[[22,[88]]]],[81,81],[[[86,[89]]],[[86,[89]]]],[[]],[[]],[87,30],[81],[[90,90],11],[[87,87],11],[[81,81],11],[[],11],[[],11],[[],11],[[90,12],13],[[90,12],13],[[87,12],13],[[87,12],13],[[81,12],13],[[86,12],13],[[81,38]],[[]],[[]],[[]],[[]],[[81,30],[[23,[[86,[91]],90]]]],[[81,30],[[23,[83,90]]]],[[81,30],[[23,[38,90]]]],[81,76],[[]],[[]],[[]],[[]],[[[86,[85]]],85],[[]],[[]],[[[92,[84]],11],81],[93],[93],[[81,69],[[23,[87]]]],[[81,38,[43,[94]]],94],[[81,38,[43,[30]]],95],[81],[81],[[]],[[]],[[],68],[[],68],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],25],[[],25],[[],25],[[],25],0,[[]],[[]],[96,96],[[]],[[96,96],11],[[],11],[[96,12],13],[[]],[[]],[[]],[[],23],[[],23],[[],25],0,[70,97],[70,[[43,[65]]]],[[]],[[]],[98,[[23,[70,71]]]],[[[43,[65]],30],70],[[[43,[65]],30],70],[[],[[23,[70,71]]]],[70,[[23,[99]]]],[70],[[70,12],13],[[]],[70,83],[[]],[97,70],[[],23],[[],23],[[],25],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[69,30,67,[22,[100]]],38],[[69,44,[22,[1]],30],58],[[69,30,74],[[23,[30]]]],[69,101],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[100,100],[69,69],[[]],[[]],[[100,100],10],[102,103],[69,[[23,[81,71]]]],[69,[[23,[81,71]]]],[[69,6],[[23,[81,71]]]],[69],[[100,100],11],[[69,69],11],[[],11],[[],11],[[100,12],13],[[69,12],13],[[104,12],13],[[105,12],13],[106,100],[[]],[[]],[[]],[[]],[69,35],[69,[[107,[79]]]],[69,[[22,[38]]]],[69,[[22,[58]]]],[[69,30],[[22,[38]]]],[69,104],[[69,30],[[22,[58]]]],[[69,30],[[108,[74]]]],[[69,30],24],[69,105],[69,[[22,[38]]]],[69,[[22,[58]]]],[69,31],[[69,30],[[22,[75]]]],[69,109],[[100,21]],[100,106],[[]],[[]],[[]],[[]],[[]],[[]],[[69,69],[[23,[71]]]],[104,22],[105,22],[[70,110],[[23,[69,71]]]],[[[111,[98]],110],[[23,[69,71]]]],[[100,100],[[22,[10]]]],[[69,[111,[98]]],[[23,[71]]]],[69],[69,71],[[69,[112,[69]]],11],[[69,79]],[[69,30]],[[69,30]],[[69,109]],[[]],[[]],[69,68],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],25],[[],25],[[],25],[[],25],[69,[[23,[71]]]],[[69,113,11,11],11],[69,70],[[69,98],11],0,0,0,0,0,0,0,[99,114],[115],[116],[117],[118],[119],[120,121],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[99],[115],[117],[119],[[99,12],13],[[115,12],13],[[116,12],13],[[117,12],13],[[118,12],13],[[119,12],13],[[120,12],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[116,29],[120,29],[116,[[43,[65]]]],[116,[[22,[31]]]],[120,[[22,[31]]]],[118,29],[116,117],[99,115],[99,119],[118,119],[118],[118,31],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[114,99],[[122,114],115],[[122,114],116],[[123,122,114],117],[[123,114],118],[[121,114],119],[121,120],[115,22],[117,22],[119,22],[116,29],[120,29],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],0,0,0,0,0,[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]],11]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]],56]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[[[112,[124]]]],[125,126],[[[112,[38]]],103],[127,128],[[]],[[]],[[]],[[]],[[]],[[]],[102,103],[[],125],[102,[[112,[124]]]],[125],[112],[[[112,[38]]],11],[[125,12],13],[[[112,[129]],12],13],[[127,12],13],[[]],[[]],[[]],[[],127],[[[112,[38]]],11],[127],[127],[127],[127],[127],[127],[127],[127],[127],[127],[127],[127],[[]],[[]],[[]],[126,125],[103,[[112,[124]]]],[128,127],[[125,[112,[38]]]],[[125,[112,[69]],11,11]],[[125,[112,[69]]]],[[130,[112,[130]]],11],[[[112,[124]],124],11],[[125,11]],[[125,11]],[[125,11]],[[125,24]],[[125,6]],[[125,24]],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],25],[[],25],[[],25],0,[[]],[[]],[71,[[22,[88]]]],[71],[71,30],[71],[[]],[[71,71],11],[[],11],0,[[71,12],[[23,[131]]]],[[71,12],[[23,[131]]]],[[]],[[]],[[],11],[30,11],[93],[[]],[[],68],[71,68],[[],23],[[],23],[[],25],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[132,112]],[133,134],[132,135],[76,136],[109,80],[109,31],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[137,137],[138,138],[139,139],[140,140],[141,141],[[]],[[]],[[]],[[]],[[]],[30,109],[30,76],[[133,109,30,30,6,138,137],[[22,[132]]]],[[],140],0,[132],[76],[[76,75,29],24],[[137,137],11],[[138,138],11],[[139,139],11],[[140,140],11],[[109,109],11],[[133,133],11],[[141,141],11],[[76,76],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[137,12],13],[[138,12],13],[[139,12],13],[[140,12],13],[[109,12],[[23,[131]]]],[[109,12],13],[[133,12],13],[[132,12],13],[[141,12],13],[[76,12],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[30,[[22,[133]]]],[109,[[23,[133,71]]]],[[76,142],24],[[76,142],29],[[76,142],29],[76,141],[[76,142],24],[132,71],[76,79],[[],109],[133,31],[132,31],[[],[[22,[133]]]],[133,31],[133,[[22,[133]]]],[[76,[22,[1]]],24],[[76,142],24],[[76,58],24],[[76,142],29],[132,133],[132,76],[132,109],[133,11],[133,11],[133,11],0,[140],[140],[140],[140],[140],[140],[140],[140],[140],[140,[[23,[68]]]],[140],[140],[140],[140],[140],[140],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[71,109],[134,133],[135,132],[136,76],[[76,75,24],[[22,[29]]]],[[76,110,[22,[1]]],64],[[132,11]],[[]],[[]],[[]],[[]],[[]],[[],68],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[132,69,139,98],[[23,[71]]]],[[132,69,139],[[23,[70,71]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[24,143],[24,143],[[143,24],143],[[72,24],143],[[64,24],143],[[41,24],143],[[75,24],143],[[144,24],143],[[],145],[[],145],[[],77],[[],77],[[],146],[143,146],[145,146],[77,146],[147,146],[72,146],[67,146],[64,146],[148,146],[41,146],[75,146],[144,146],[78,146],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[143,143],[145,145],[77,77],[147,147],[72,72],[67,67],[149,149],[64,64],[148,148],[41,41],[75,75],[144,144],[78,78],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[64,46],[[143,[43,[66]]],66],[[72,[43,[150]]],66],[[64,[43,[46]]],66],[[41,[43,[34]]],66],[[75,[43,[53]]],66],[[144,[43,[54]]],66],[[72,151],150],[[72,30],150],[[64,29,11],46],[[64,[43,[29]]],46],[[64,30,149],[[22,[46]]]],[[75,[43,[42]]],53],[41,34],[[[43,[47]]],54],[143,66],[77,42],[72,150],[64,46],[41,34],[75,53],[144,54],[75,24],[67,24],[[72,151],94],[[64,29,11],94],[[143,143],11],[[145,145],11],[[77,77],11],[[147,147],11],[[72,72],11],[[67,67],11],[[149,149],11],[[64,64],11],[[148,148],11],[[41,41],11],[[75,75],11],[[144,144],11],[[78,78],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[143,12],13],[[143,12],13],[[145,12],13],[[145,12],13],[[77,12],13],[[77,12],13],[[147,12],13],[[147,12],13],[[72,12],13],[[72,12],13],[[67,12],13],[[67,12],13],[[149,12],13],[[64,12],13],[[64,12],13],[[148,12],13],[[148,12],13],[[41,12],13],[[41,12],13],[[75,12],13],[[75,12],13],[[144,12],13],[[144,12],13],[[78,12],13],[[78,12],13],[[[43,[147]],11],67],[[[43,[147]],11],67],[[143,[43,[147]],11],67],[[72,[43,[147]],11],67],[[64,[43,[147]],11],67],[[41,[43,[147]],11],67],[[75,[43,[147]],11],67],[[144,[43,[147]],11],67],[[78,[43,[147]],11],67],[[]],[78,145],[75,145],[67,145],[41,145],[[]],[144,145],[72,145],[143,145],[64,145],[64,77],[144,77],[75,77],[[]],[41,77],[72,77],[143,77],[41,147],[77,147],[148,147],[64,147],[144,147],[75,147],[143,147],[72,147],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[41,1],[143,46],[72,46],[64,46],[41,46],[75,46],[144,46],[64,24],[143,35],[72,35],[67,35],[64,35],[41,35],[75,35],[144,35],[78,35],[143,77],[41,145],[144,77],[[75,24],[[22,[77]]]],[75,[[108,[77]]]],[75,[[22,[31]]]],[67,[[108,[77]]]],[67,[[22,[77]]]],[144,24],[143,66],[72,150],[64,46],[41,34],[75,53],[144,54],[[149,21]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[145,143],[77,143],[147,143],[145,72],[77,72],[147,72],[145,67],[145,64],[77,64],[147,64],[147,148],[145,41],[77,41],[147,41],[145,75],[77,75],[147,75],[145,144],[77,144],[147,144],[145,78],[145,11],[77,11],[147,11],[145,11],[77,11],[147,11],[145,11],[145,11],[77,11],[147,11],[147,11],[75,11],[75,11],[145,11],[77,11],[147,11],[[],11],[[],11],[67,11],[78,11],[145,11],[77,11],[147,11],[67,11],[145,11],[77,11],[147,11],[145,11],[143,24],[[149,30],11],[146,143],[146,145],[146,77],[146,72],[146,67],[146,64],[146,41],[146,75],[146,144],[146,78],[[],71],[[],71],[143,71],[145,71],[77,71],[147,71],[72,71],[67,71],[64,71],[148,71],[41,71],[75,71],[144,71],[78,71],[1,41],[1,41],[[143,1],41],[[72,1],41],[[67,1],41],[[64,1],41],[[41,1],41],[[75,1],41],[[144,1],41],[[75,[43,[77]],11],11],[[],[[22,[46]]]],[[],[[22,[46]]]],[143,[[22,[46]]]],[145,[[22,[46]]]],[72,46],[64,46],[41,46],[75,[[22,[46]]]],[144,[[22,[46]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[77,[[23,[143]]]],[147,[[23,[143]]]],[145,[[23,[143]]]],[[],23],[[],23],[147,[[23,[77]]]],[[],23],[145,[[23,[77]]]],[[],23],[145,[[23,[147]]]],[77,[[23,[72]]]],[[],23],[147,[[23,[72]]]],[145,[[23,[72]]]],[[],23],[145,[[23,[67]]]],[65,[[23,[149]]]],[[],23],[147,[[23,[64]]]],[145,[[23,[64]]]],[77,[[23,[64]]]],[[],23],[147,[[23,[148]]]],[[],23],[147,[[23,[41]]]],[145,[[23,[41]]]],[[],23],[77,[[23,[41]]]],[145,[[23,[75]]]],[[],23],[77,[[23,[75]]]],[147,[[23,[75]]]],[145,[[23,[144]]]],[77,[[23,[144]]]],[[],23],[147,[[23,[144]]]],[145,[[23,[78]]]],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[72,24],144],[[64,24],144],[[41,24],144],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[51,28,26]],[[38,28,26]],[[61,43]],[[],59],[[],59],[[],152],[[],152],[61,42],[[],42],[[],42],[[94,72],151],[38,58],[66,[[22,[36]]]],[150,[[22,[36]]]],[46,[[22,[36]]]],[61,36],[34,[[22,[36]]]],[53,[[22,[36]]]],[54,[[22,[36]]]],[[],[[22,[36]]]],[[],[[22,[36]]]],[[94,11],29],[58,34],[48,146],[[],153],[66,153],[51,153],[59,153],[152,153],[42,153],[50,153],[150,153],[38,153],[58,153],[36,153],[46,153],[74,153],[61,153],[34,153],[53,153],[54,153],[48,153],[[51,28],[[108,[26]]]],[[38,28],[[108,[26]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[66,66],[37,37],[51,51],[59,59],[152,152],[42,42],[50,50],[150,150],[38,38],[58,58],[52,52],[36,36],[46,46],[74,74],[61,61],[34,34],[53,53],[54,54],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[150,150],150],[[46,46],46],[[34,41],34],[[46,46],46],[[46,46],46],[[46,64],46],[[150,72],150],[[46,64,11],46],[[34,41],34],[[150,3,150],46],[[150,150],150],[[46,46],46],[[46,46],46],[[150,72],150],[[54,46],42],[[[43,[24]]],42],[[[43,[24]]],42],[[34,[43,[46]]],34],[[34,[43,[46]]],34],[[54,46,47],42],[[47,[43,[24]]],42],[[47,[43,[24]]],42],[[46,2,46],46],[[150,150],150],[[46,46],46],[150,150],[46,46],[46,46],[[46,46],46],[[46,46],46],[46,46],[[46,46],46],[[46,46],46],[[46,46],46],[46,46],[[46,46],46],[[46,46],46],[[150,150],150],[[46,46],46],[[46,64],46],[[46,64],46],[[46,47,47],42],[[54,47,47],42],[[46,46],46],[[54,54,54],54],[[46,46],46],[[46,46],46],[[46,72],150],[[150,150],150],[[46,46],46],[[34,64],46],[[46,41],34],[[150,64],46],[[150,64],46],[[150,72],150],[[46,64],46],[[46,64],46],[[46,46],46],[[46,46],46],[[46,72],150],[[46,46],46],[[46,64],46],[[46,64],46],[51,24],[[51,28],24],[[38,28],24],[38,24],[61,24],[38,24],[102,103],[[],94],[38],[58],[94],[[66,66],11],[[66,50],11],[[66,59],11],[[66,152],11],[[66,42],11],[[37,37],11],[[51,51],11],[[59,53],11],[[59,59],11],[[59,66],11],[[152,34],11],[[152,36],11],[[152,54],11],[[152,46],11],[[152,74],11],[[152,150],11],[[152,61],11],[[152,38],11],[[152,53],11],[[152,152],11],[[152,66],11],[[42,150],11],[[42,34],11],[[42,53],11],[[42,42],11],[[42,66],11],[[42,46],11],[[42,54],11],[[50,150],11],[[50,74],11],[[50,53],11],[[50,46],11],[[50,66],11],[[50,34],11],[[50,54],11],[[50,50],11],[[150,50],11],[[150,42],11],[[150,152],11],[[150,150],11],[[38,38],11],[[38,152],11],[[58,58],11],[[52,52],11],[[36,152],11],[[36,36],11],[[46,152],11],[[46,46],11],[[46,42],11],[[46,50],11],[[74,50],11],[[74,152],11],[[74,74],11],[[61,152],11],[[61,61],11],[[34,152],11],[[34,34],11],[[34,50],11],[[34,42],11],[[53,59],11],[[53,53],11],[[53,152],11],[[53,50],11],[[53,42],11],[[54,42],11],[[54,50],11],[[54,152],11],[[54,54],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[36],[[66,12],13],[[66,12],13],[[37,12],13],[[51,12],13],[[51,12],13],[[59,12],13],[[59,12],13],[[152,12],13],[[152,12],13],[[42,12],13],[[42,12],13],[[50,12],13],[[50,12],13],[[150,12],13],[[150,12],13],[[38,12],13],[[38,12],13],[[94,12],13],[[58,12],13],[[58,12],13],[[52,12],13],[[36,12],13],[[36,12],13],[[46,12],13],[[46,12],13],[[74,12],13],[[74,12],13],[[61,12],13],[[61,12],13],[[34,12],13],[[34,12],13],[[53,12],13],[[53,12],13],[[54,12],13],[[54,12],13],[[48,12],13],[[48,12],13],[[]],[[]],[[]],[66,59],[[]],[53,59],[46,152],[74,152],[54,152],[38,152],[66,152],[[]],[61,152],[42,152],[150,152],[53,152],[36,152],[34,152],[46,42],[66,42],[[]],[34,42],[53,42],[54,42],[150,42],[54,50],[[]],[150,50],[74,50],[53,50],[46,50],[42,50],[66,50],[34,50],[[]],[[]],[[]],[[]],[[]],[154,52],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[38,48],[[]],[58,24],[36,[[23,[24,30]]]],[36,[[23,[4,30]]]],[38,[[108,[32]]]],[51,24],[38,24],[51,38],[150,22],[58,9],[[54,24],42],[[51,28,24],[[22,[26]]]],[[38,28,24],[[22,[26]]]],[36,[[22,[3]]]],[38,[[22,[32]]]],[38,[[22,[42]]]],[[],[[22,[37]]]],[[],[[22,[37]]]],[36,[[22,[37]]]],[38,31],[36,[[22,[2]]]],[[61,24],22],[58,[[22,[42]]]],[[36,30],[[22,[36]]]],[38,24],[38,[[22,[32]]]],[38,[[22,[42]]]],[38,100],[58,100],[[36,24],[[22,[74]]]],[66,31],[150,31],[38,31],[58,31],[36,[[22,[31]]]],[46,31],[74,31],[61,31],[34,31],[53,31],[54,31],[38,[[22,[38]]]],[58,[[22,[58]]]],[36,[[22,[36]]]],[37,[[22,[37]]]],[74,24],[74,[[108,[50]]]],[[38,24],[[22,[42]]]],[36,24],[36,52],[[36,24],[[22,[[155,[42,32]]]]]],[[36,24],[[22,[37]]]],0,[38,[[108,[42]]]],[36,[[22,[32]]]],[38,[[22,[38]]]],[38,[[22,[38]]]],[58,[[22,[58]]]],[36,[[22,[36]]]],[38,[[22,[31]]]],[58,[[22,[31]]]],[46,[[22,[156]]]],[[51,28,30],[[22,[26]]]],[[38,28,30],[[22,[26]]]],[66,[[22,[31]]]],[74,[[22,[31]]]],[58,[[22,[8]]]],[66,143],[152,145],[42,77],[150,72],[38,67],[36,145],[46,64],[34,41],[53,75],[54,144],[37,[[155,[42,32]]]],[37,152],[58,7],[36,[[23,[11,30]]]],[46,[[22,[29]]]],[36,11],[38,11],[58,11],[[66,21]],[[51,21]],[[59,21]],[[152,21]],[[42,21]],[[50,21]],[[150,21]],[[38,21]],[[58,21]],[[52,21]],[[36,21]],[[46,21]],[[74,21]],[[61,21]],[[34,21]],[[53,21]],[[54,21]],[94,24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[52,154],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[59,66],[152,66],[42,66],[50,66],[152,150],[42,150],[50,150],[152,38],[152,36],[152,46],[42,46],[50,46],[50,74],[152,61],[94],[152,34],[42,34],[50,34],[59,53],[152,53],[42,53],[50,53],[152,54],[42,54],[50,54],[59,11],[152,11],[42,11],[50,11],[66,11],[150,11],[46,11],[34,11],[54,11],[66,11],[58,11],[54,11],[46,11],[54,11],[58,11],[58,11],[152,11],[42,11],[50,11],[152,11],[152,11],[152,11],[42,11],[50,11],[50,11],[74,11],[66,11],[150,11],[38,11],[46,11],[61,11],[34,11],[53,11],[54,11],[152,11],[152,11],[42,11],[50,11],[74,11],[59,11],[152,11],[42,11],[50,11],[51,11],[36,11],[58,11],[66,11],[150,11],[38,11],[46,11],[61,11],[34,11],[53,11],[54,11],[152,11],[42,11],[50,11],[153],[153],[153],[153,150],[153,46],[153,34],[153,34],[153,54],[153,54],[153,54],[66],[150],[38],[46],[74],[34],[53],[54],[[],71],[[],71],[[51,28,24]],[[38,28,24]],[36],[[51,28,30]],[[38,28,30]],[[66,66]],[[150,150]],[[38,38]],[[36,36]],[[46,46]],[[74,74]],[[61,61]],[[34,34]],[[53,53]],[[54,54]],[[38,[112,[38]]],11],[[58,24]],[[36,24],[[23,[30]]]],[[51,28,24]],[[36,4],[[23,[30]]]],[[51,24]],[[38,24]],[[58,11]],[[58,9]],[[58,11]],[[38,30]],[[58,47]],[[38,100]],[[58,100]],[[36,74,24],[[23,[30]]]],[30],[30],[[66,30]],[[42,30]],[[150,30]],[[58,30]],[[36,30],[[23,[30]]]],[[46,30]],[[61,30]],[[34,30]],[[53,30]],[[54,30]],[[36,24,47],11],[[38,24,24]],[[38,38]],[[38,[22,[30]]]],[[58,[22,[30]]]],[[51,11]],[[58,11]],[[58,[22,[8]]]],[[58,11]],[[58,7]],[[36,11],[[23,[30]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[[],68],[51,[[155,[42,36]]]],[59,[[23,[66]]]],[42,[[23,[66]]]],[[],23],[50,[[23,[66]]]],[152,[[23,[66]]]],[[],23],[[],23],[[],23],[[],23],[[],23],[50,[[23,[42]]]],[152,[[23,[42]]]],[[],23],[152,[[23,[50]]]],[36,[[23,[150]]]],[152,[[23,[150]]]],[42,[[23,[150]]]],[50,[[23,[150]]]],[[],23],[[],23],[152,[[23,[38]]]],[[],23],[[],23],[[],23],[152,[[23,[36]]]],[[],23],[152,[[23,[46]]]],[36,[[23,[46]]]],[50,[[23,[46]]]],[42,[[23,[46]]]],[[],23],[152,[[23,[74]]]],[[],23],[50,[[23,[74]]]],[36,[[23,[61]]]],[[],23],[152,[[23,[61]]]],[42,[[23,[34]]]],[50,[[23,[34]]]],[[],23],[152,[[23,[34]]]],[36,[[23,[34]]]],[50,[[23,[53]]]],[152,[[23,[53]]]],[42,[[23,[53]]]],[59,[[23,[53]]]],[[],23],[42,[[23,[54]]]],[[],23],[152,[[23,[54]]]],[50,[[23,[54]]]],[34,[[23,[48]]]],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[38,11],11],[38],[38]],"c":[1172],"p":[[3,"AddressSpace"],[4,"IntPredicate"],[4,"FloatPredicate"],[4,"AtomicOrdering"],[4,"AtomicRMWBinOp"],[4,"OptimizationLevel"],[4,"GlobalVisibility"],[4,"ThreadLocalMode"],[4,"DLLStorageClass"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"u16"],[4,"LLVMIntPredicate"],[4,"LLVMRealPredicate"],[4,"LLVMAtomicOrdering"],[4,"LLVMAtomicRMWBinOp"],[4,"LLVMVisibility"],[4,"LLVMDLLStorageClass"],[8,"Hasher"],[4,"Option"],[4,"Result"],[15,"u32"],[3,"TypeId"],[3,"Attribute"],[6,"LLVMAttributeRef"],[4,"AttributeLoc"],[15,"u64"],[15,"str"],[3,"CStr"],[3,"BasicBlock"],[6,"LLVMBasicBlockRef"],[3,"PointerValue"],[3,"ContextRef"],[3,"InstructionValue"],[3,"BasicValueUse"],[3,"FunctionValue"],[3,"Builder"],[6,"LLVMBuilderRef"],[3,"PointerType"],[4,"BasicValueEnum"],[15,"slice"],[8,"BasicType"],[8,"IntMathValue"],[3,"IntValue"],[8,"BasicValue"],[3,"CallableValue"],[8,"Into"],[4,"BasicMetadataValueEnum"],[3,"CallSiteValue"],[4,"InstructionOpcode"],[3,"StructValue"],[3,"VectorValue"],[8,"AggregateValue"],[15,"i32"],[8,"FloatMathValue"],[3,"GlobalValue"],[4,"AggregateValueEnum"],[8,"PointerMathValue"],[3,"PhiValue"],[3,"Context"],[6,"LLVMContextRef"],[3,"IntType"],[15,"u8"],[3,"ArrayValue"],[3,"FunctionType"],[3,"String"],[3,"Module"],[3,"MemoryBuffer"],[3,"LLVMString"],[3,"FloatType"],[8,"FnOnce"],[3,"MetadataValue"],[3,"StructType"],[3,"TargetData"],[4,"BasicTypeEnum"],[3,"VoidType"],[3,"DataLayout"],[6,"c_char"],[3,"ExecutionEngine"],[8,"AnyValue"],[15,"usize"],[6,"LLVMExecutionEngineRef"],[8,"Copy"],[3,"JitFunction"],[4,"RemoveModuleError"],[8,"Error"],[8,"Clone"],[4,"FunctionLookupError"],[8,"UnsafeFunctionPointer"],[3,"Rc"],[3,"Demand"],[3,"GenericValue"],[6,"c_int"],[3,"Intrinsic"],[6,"LLVMMemoryBufferRef"],[3,"Path"],[3,"ObjectFile"],[4,"Linkage"],[6,"LLVMModuleRef"],[8,"Borrow"],[6,"LLVMPassManagerRef"],[3,"FunctionIterator"],[3,"GlobalIterator"],[4,"LLVMLinkage"],[3,"Ref"],[3,"Vec"],[3,"TargetTriple"],[8,"AsContextRef"],[8,"AsRef"],[3,"PassManager"],[3,"File"],[6,"LLVMObjectFileRef"],[3,"SectionIterator"],[3,"Section"],[3,"RelocationIterator"],[3,"Relocation"],[3,"SymbolIterator"],[3,"Symbol"],[6,"LLVMSymbolIteratorRef"],[6,"LLVMSectionIteratorRef"],[6,"LLVMRelocationIteratorRef"],[8,"PassManagerSubType"],[3,"PassManagerBuilder"],[6,"LLVMPassManagerBuilderRef"],[3,"PassRegistry"],[6,"LLVMPassRegistryRef"],[8,"Debug"],[8,"Sized"],[3,"Error"],[3,"TargetMachine"],[3,"Target"],[6,"LLVMTargetRef"],[6,"LLVMTargetMachineRef"],[6,"LLVMTargetDataRef"],[4,"CodeModel"],[4,"RelocMode"],[4,"FileType"],[3,"InitializationConfig"],[4,"ByteOrdering"],[8,"AnyType"],[3,"ArrayType"],[3,"VectorType"],[4,"AnyTypeEnum"],[6,"LLVMTypeRef"],[4,"BasicMetadataTypeEnum"],[3,"MetadataType"],[4,"StringRadix"],[3,"FloatValue"],[15,"f64"],[4,"AnyValueEnum"],[6,"LLVMValueRef"],[4,"LLVMOpcode"],[4,"Either"],[15,"i64"],[8,"IntMathType"],[8,"FloatMathType"],[8,"PointerMathType"],[8,"AsTypeRef"],[8,"AsValueRef"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
